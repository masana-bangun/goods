import React, { useState, useRef } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  ActivityIndicator,
  ScrollView,
  Modal,
} from "react-native";
import NumerologyResults from "./NumerologyResults";
import { Picker } from "@react-native-picker/picker";
import {
  normalisasiNama,
  hitungNilaiNumerologi,
  reduksiAngka,
  generateComplexNames,
  generateCombiNames,
  generateBalancedNames,
  generateSynchronizedNames,
  getPola,
  calculateGrafologiIndex,
  languageDatabases,
  complexState,
  resetComplexState,
  generateNameVariations,
  calculateMetricsForNameBasic,
  getDatabaseKeysForComplex,
  ComplexSearchState,
  combiState,
  resetCombiState,
  getDatabasePairsForCombi,
  CombiState,
  searchNameDictionary,
  getAvailableLanguages,
} from "../utils/numerologyUtils";
import { useTranslation } from "./MainApp";

// Vlookup table for G1-G9 descriptions (extracted from NumerologyResults)
const vlookupTable: { [key: number]: { [lang: string]: string } } = {
  1: {
    id: "ЁЯШО Mengembangkan Hobi dan kegemaran, hobi yang menghasilkan (keuangan, pujian) serta kehormatan",
    en: "ЁЯШО Develop hobbies and hobbies, hobbies that produce (financial, praise) and honor",
    fr: "ЁЯШО D├йvelopper des passe-temps et des passe-temps, des passe-temps qui produisent (financiers, louanges) et honorent",
    es: "ЁЯШО Desarrollar pasatiempos y aficiones, pasatiempos que produzcan (financieros, elogios) y honor.",
    ar: "ЁЯШО ╪к┘Ж┘Е┘К╪й ╪з┘Д┘З┘И╪з┘К╪з╪к ┘И╪з┘Д┘З┘И╪з┘К╪з╪к╪М ┘З┘И╪з┘К╪з╪к ╪к┘Ж╪к╪м (┘Е╪з┘Д┘К╪й╪М ┘Е╪п┘К╪н╪з┘Л) ┘И╪к┘Г╪▒┘К┘Е╪з┘Л",
    zh: "ЁЯШО хЯ╣хЕ╗чИ▒хе╜хТМчИ▒хе╜я╝Мф║зчФЯя╝Иш┤вхКбуАБшбицЙмя╝ЙхТМшНгшкЙчЪДчИ▒хе╜",
    hi: "ЁЯШО рд╢реМрдХ рдФрд░ рд╢реМрдХ рд╡рд┐рдХрд╕рд┐рдд рдХрд░реЗрдВ, рдРрд╕реЗ рд╢реМрдХ рдЬреЛ (рд╡рд┐рддреНрддреАрдп, рдкреНрд░рд╢рдВрд╕рд╛) рдФрд░ рд╕рдореНрдорд╛рди рдкреИрджрд╛ рдХрд░реЗрдВ",
  },
  3: {
    id: "ЁЯШЗ Senantiasalah ingat pada tuhan, Agamais, percaya pada kekuatan ruh, rohani dan spiritual",
    en: "ЁЯШЗ Always remember God, be religious, believe in the power of the spirit, spirit and spirit",
    fr: "ЁЯШЗ Souvenez-vous toujours de Dieu, soyez religieux, croyez en la puissance de l'esprit, de l'esprit et de l'esprit",
    es: "ЁЯШЗ Recuerda siempre a Dios, s├й religioso, cree en el poder del esp├нritu, esp├нritu y esp├нritu.",
    ar: "ЁЯШЗ ╪з╪░┘Г╪▒ ╪з┘Д┘Д┘З ╪п╪з╪ж┘Е┘Л╪з╪М ┘И┘Г┘Ж ┘Е╪к╪п┘К┘Ж┘Л╪з╪М ┘И╪в┘Е┘Ж ╪и┘В┘И╪й ╪з┘Д╪▒┘И╪н ┘И╪з┘Д╪▒┘И╪н ┘И╪з┘Д╪▒┘И╪н",
    zh: "ЁЯШЗ ц░╕ш┐Ьшо░ф╜Пф╕Кх╕Эя╝МшЩФшпЪя╝МчЫ╕ф┐бч▓╛чеЮуАБч▓╛чеЮхТМч▓╛чеЮчЪДхКЫщЗП",
    hi: "ЁЯШЗ рд╕рджреИрд╡ рдИрд╢реНрд╡рд░ рдХреЛ рдпрд╛рдж рд░рдЦреЗрдВ, рдзрд╛рд░реНрдорд┐рдХ рдмрдиреЗрдВ, рдЖрддреНрдорд╛, рдЖрддреНрдорд╛ рдФрд░ рдЖрддреНрдорд╛ рдХреА рд╢рдХреНрддрд┐ рдкрд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рд░рдЦреЗрдВ",
  },
  4: {
    id: "ЁЯСо Mengembangkan keteguhan, tegas berpengaruh, tetap bijaksana dalam kekuasaan",
    en: "ЁЯСо Develop firmness, be firm in influence, remain wise in power",
    fr: "ЁЯСо D├йvelopper la fermet├й, ├кtre ferme en influence, rester sage en puissance",
    es: "ЁЯСо Desarrolla firmeza, s├й firme en la influencia, permanece sabio en el poder.",
    ar: "ЁЯСо ┘Г┘Ж ╪н╪з╪▓┘Е┘Л╪з╪М ╪н╪з╪▓┘Е┘Л╪з ┘Б┘К ╪з┘Д╪к╪г╪л┘К╪▒╪М ╪н╪з┘Б╪╕┘Л╪з ╪╣┘Д┘Й ╪з┘Д╪н┘Г┘Е╪й ┘Б┘К ╪з┘Д╪│┘Д╪╖╪й",
    zh: "ЁЯСо хЯ╣хЕ╗хЭЪхоЪцАзя╝МхЭЪхоЪх╜▒хУНхКЫя╝Мф┐ЭцМБцШОцЩ║чЪДцЭГхКЫ",
    hi: "ЁЯСо рджреГрдврд╝рддрд╛ рд╡рд┐рдХрд╕рд┐рдд рдХрд░реЛ, рдкреНрд░рднрд╛рд╡ рдореЗрдВ рджреГрдврд╝ рд░рд╣реЛ, рд╢рдХреНрддрд┐ рдореЗрдВ рдмреБрджреНрдзрд┐рдорд╛рди рд░рд╣реЛ",
  },
  5: {
    id: "ЁЯТС Menjaga kehormatan diri/keluarga agar meraih kebahagiaan, kehormatan dan pernikahan",
    en: "ЁЯТС Maintain self/family honor in order to achieve happiness, honor and marriage",
    fr: "ЁЯТС Maintenir l'honneur de soi et de sa famille afin d'atteindre le bonheur, l'honneur et le mariage",
    es: "ЁЯТС Mantener el honor propio y familiar para lograr la felicidad, el honor y el matrimonio.",
    ar: "ЁЯТС ╪з┘Д╪н┘Б╪з╪╕ ╪╣┘Д┘Й ╪┤╪▒┘Б ╪з┘Д╪░╪з╪к/╪з┘Д╪╣╪з╪ж┘Д╪й ┘Д╪к╪н┘В┘К┘В ╪з┘Д╪│╪╣╪з╪п╪й ┘И╪з┘Д╪┤╪▒┘Б ┘И╪з┘Д╪▓┘И╪з╪м",
    zh: "ЁЯТС ч╗┤цКдшЗкцИС/хо╢х║ншНгшкЙя╝Мф╗ешО╖х╛Чх╣╕чжПуАБшНгшкЙхТМхйЪхз╗",
    hi: "ЁЯТСрдЦреБрд╢реА, рд╕рдореНрдорд╛рди рдФрд░ рд╡рд┐рд╡рд╛рд╣ рдХреА рдкреНрд░рд╛рдкреНрддрд┐ рдХреЗ рд▓рд┐рдП рдЕрдкрдирд╛/рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рд╕рдореНрдорд╛рди рдмрдирд╛рдП рд░рдЦреЗрдВ",
  },
  6: {
    id: "ЁЯд╣ Tetap berusaha melakukan yang terbaik, sepenuh hati hingga mudah meraih kesempurnaan",
    en: "ЁЯд╣ Keep trying to do your best, wholeheartedly until you can easily achieve perfection",
    fr: "ЁЯд╣ Continuez ├а essayer de faire de votre mieux, de tout c┼Уur, jusqu'├а ce que vous puissiez facilement atteindre la perfection.",
    es: "ЁЯд╣ Sigue intentando hacer lo mejor que puedas, de todo coraz├│n hasta que puedas alcanzar f├бcilmente la perfecci├│n.",
    ar: "ЁЯд╣ ╪з╪│╪к┘Е╪▒ ┘Б┘К ┘Е╪н╪з┘И┘Д╪й ╪и╪░┘Д ┘В╪╡╪з╪▒┘Й ╪м┘З╪п┘Г ╪и┘Г┘Д ╪е╪о┘Д╪з╪╡ ╪н╪к┘Й ╪к╪к┘Е┘Г┘Ж ┘Е┘Ж ╪к╪н┘В┘К┘В ╪з┘Д┘Г┘Е╪з┘Д ╪и╪│┘З┘И┘Д╪й",
    zh: "ЁЯд╣ ф╕НцЦнхКкхКЫя╝МхЕих┐ГхЕицДПя╝МчЫ┤хИ░ш╜╗цЭ╛ш╛╛хИ░хоМч╛О",
    hi: "ЁЯд╣рдЬрдм рддрдХ рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ рдкреВрд░реНрдгрддрд╛ рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рдХрд░ рд▓реЗрддреЗ, рддрдм рддрдХ рдкреВрд░реЗ рджрд┐рд▓ рд╕реЗ рдЕрдкрдирд╛ рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░рддреЗ рд░рд╣реЗрдВ",
  },
  7: {
    id: "ЁЯШБ Teruslah mencari jalan kehidupan yang tentram, kebebasan, merdeka, bahagia dan kesempurnaan",
    en: "ЁЯШБ Continue to look for a path of life that is peaceful, freedom, independence, happiness and perfection",
    fr: "ЁЯШБ Continuez ├а chercher un chemin de vie paisible, libre, ind├йpendant, heureux et parfait.",
    es: "ЁЯШБ Sigue buscando un camino de vida que sea pac├нfico, libertad, independencia, felicidad y perfecci├│n.",
    ar: "ЁЯШБ ╪з╪│╪к┘Е╪▒ ┘Б┘К ╪з┘Д╪и╪н╪л ╪╣┘Ж ╪╖╪▒┘К┘В ╪н┘К╪з╪й ┘К╪│┘И╪п┘З ╪з┘Д╪│┘Д╪з┘Е ┘И╪з┘Д╪н╪▒┘К╪й ┘И╪з┘Д╪з╪│╪к┘В┘Д╪з┘Д ┘И╪з┘Д╪│╪╣╪з╪п╪й ┘И╪з┘Д┘Г┘Е╪з┘Д",
    zh: "ЁЯШБ ч╗зч╗нхп╗цЙ╛х╣│щЭЩуАБшЗкчФ▒уАБчЛмчлЛуАБх╣╕чжПуАБхоМч╛ОчЪДф║║чФЯф╣Лш╖п",
    hi: "ЁЯШБрдЬреАрд╡рди рдХреЗ рдРрд╕реЗ рдорд╛рд░реНрдЧ рдХреА рддрд▓рд╛рд╢ рдЬрд╛рд░реА рд░рдЦреЗрдВ рдЬреЛ рд╢рд╛рдВрддрд┐рдкреВрд░реНрдг, рд╕реНрд╡рддрдВрддреНрд░рддрд╛, рд╕реНрд╡рддрдВрддреНрд░рддрд╛, рдЦреБрд╢реА рдФрд░ рдкреВрд░реНрдгрддрд╛ рд╣реЛ",
  },
  10: {
    id: "ЁЯЩГ Berlatih tekun dan beribadah/puasa agar berhasil baik, pintar dan beruntung",
    en: "ЁЯЩГ Practice diligently and worship/fast to be successful, smart and lucky",
    fr: "ЁЯЩГ Pratiquez avec diligence et adorez/je├╗nez pour r├йussir, ├кtre intelligent et chanceux",
    es: "ЁЯЩГ Practica diligentemente y adora/ayuna para tener ├йxito, ser inteligente y tener suerte.",
    ar: "ЁЯЩГ ╪к╪п╪▒╪и ╪и╪з╪м╪к┘З╪з╪п ┘И╪╣╪и╪з╪п╪й/╪│╪▒┘К╪╣┘Л╪з ┘Д╪к╪н┘В┘К┘В ╪з┘Д╪▒╪о╪з╪б ┘И╪з┘Д╪░┘Г╪з╪б ┘И╪з┘Д╪н╪╕",
    zh: "ЁЯЩГ хЛдхеЛф┐ошбМя╝МшЖЬцЛЬ/цЦЛцИТя╝МшО╖х╛ЧцИРхКЯуАБшБкцШОхТМх╣╕ш┐Р",
    hi: "ЁЯЩГ рд╕рдлрд▓, рдЪрддреБрд░ рдФрд░ рднрд╛рдЧреНрдпрд╢рд╛рд▓реА рдмрдирдиреЗ рдХреЗ рд▓рд┐рдП рд▓рдЧрди рд╕реЗ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ рдФрд░ рдкреВрдЬрд╛/рдЙрдкрд╡рд╛рд╕ рдХрд░реЗрдВ",
  },
  12: {
    id: "ЁЯЩВ Berusaha menjadi lebih bermanfaat dalam hal baik dan berguna",
    en: "ЁЯЩВ Try to be more useful in good and useful ways",
    fr: "ЁЯЩВ Essayez d'├кtre plus utile de mani├иre bonne et utile",
    es: "ЁЯЩВ Trate de ser m├бs ├║til de maneras buenas y ├║tiles.",
    ar: "ЁЯЩВ ╪н╪з┘И┘Д ╪г┘Ж ╪к┘Г┘И┘Ж ╪г┘Г╪л╪▒ ┘Б╪з╪ж╪п╪й ╪и╪╖╪▒┘В ╪м┘К╪п╪й ┘И┘Е┘Б┘К╪п╪й",
    zh: "ЁЯЩВ х░ЭшпХф╗ехе╜чЪДхТМцЬЙчФичЪДцЦ╣х╝ПхПШх╛ЧцЫ┤цЬЙчФи",
    hi: "ЁЯЩВ рдЕрдЪреНрдЫреЗ рдФрд░ рдЙрдкрдпреЛрдЧреА рддрд░реАрдХреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ рдЙрдкрдпреЛрдЧреА рдмрдирдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ",
  },
  15: {
    id: "ЁЯС│ Tetap menjaga ketaatan dalam ibadah, berperilaku baik budi dan sopan",
    en: "ЁЯС│ Continue to maintain obedience in worship, behave kindly and politely",
    fr: "ЁЯС│ Continuez ├а maintenir l'ob├йissance dans l'adoration, comportez-vous avec gentillesse et politesse",
    es: "ЁЯС│ Contin├║e manteniendo la obediencia en la adoraci├│n, comp├│rtese con amabilidad y cortes├нa.",
    ar: "ЁЯС│╪з┘Д┘Е╪п╪з┘И┘Е╪й ╪╣┘Д┘Й ╪з┘Д╪╖╪з╪╣╪й ┘Б┘К ╪з┘Д╪╣╪и╪з╪п╪й ┘И╪з┘Д╪к╪╡╪▒┘Б ╪и┘Д╪╖┘Б ┘И╪г╪п╪и",
    zh: "ЁЯС│ ч╗зч╗нф┐ЭцМБцХмцЛЬф╕нчЪДцЬНф╗Оя╝МшбичО░х╛ЧхПЛхЦДхТМцЬЙчд╝ш▓М",
    hi: "ЁЯС│рдкреВрдЬрд╛ рдореЗрдВ рдЖрдЬреНрдЮрд╛рдХрд╛рд░рд┐рддрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВ, рдирдореНрд░рддрд╛ рдПрд╡рдВ рдирдореНрд░рддрд╛ рд╕реЗ рд╡реНрдпрд╡рд╣рд╛рд░ рдХрд░реЗрдВ",
  },
  16: {
    id: "ЁЯСл Tebarkan rasa Kecintaan dan teruslah berusaha meraih kebahagiaan",
    en: "ЁЯСл Spread love and keep trying to achieve happiness",
    fr: "ЁЯСл R├йpandez l'amour et continuez ├а essayer d'atteindre le bonheur",
    es: "ЁЯСл Difunde amor y sigue intentando alcanzar la felicidad.",
    ar: "ЁЯСл ╪з┘Ж╪┤╪▒ ╪з┘Д╪н╪и ┘И╪з╪│╪к┘Е╪▒ ┘Б┘К ╪з┘Д┘Е╪н╪з┘И┘Д╪й ┘Д╪к╪н┘В┘К┘В ╪з┘Д╪│╪╣╪з╪п╪й",
    zh: "ЁЯСл ф╝ацТнчИ▒я╝Мф╕НцЦнхКкхКЫшО╖х╛Чх╣╕чжП",
    hi: "ЁЯСл рдкреНрдпрд╛рд░ рдлреИрд▓рд╛рдПрдВ рдФрд░ рдЦреБрд╢рд┐рдпрд╛рдВ рд╣рд╛рд╕рд┐рд▓ рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░рддреЗ рд░рд╣реЗрдВ",
  },
  21: {
    id: "ЁЯХ╡я╕П Penuhi diri dengan Semangat dalam hidup, bergerak, aktif, pengetahuan dan keindahan",
    en: "ЁЯХ╡я╕П Fill yourself with enthusiasm for life, movement, activity, knowledge and beauty",
    fr: "ЁЯХ╡я╕П Remplissez-vous d'enthousiasme pour la vie, le mouvement, l'activit├й, la connaissance et la beaut├й",
    es: "ЁЯХ╡я╕П Ll├йnate de entusiasmo por la vida, el movimiento, la actividad, el conocimiento y la belleza.",
    ar: "ЁЯХ╡я╕П ╪з┘Е┘Д╪г ┘Ж┘Б╪│┘Г ╪и╪з┘Д╪н┘Е╪з╪│ ┘Д┘Д╪н┘К╪з╪й ┘И╪з┘Д╪н╪▒┘Г╪й ┘И╪з┘Д┘Ж╪┤╪з╪╖ ┘И╪з┘Д┘Е╪╣╪▒┘Б╪й ┘И╪з┘Д╪м┘Е╪з┘Д",
    zh: "ЁЯХ╡я╕П шойшЗкх╖▒хЕЕц╗бхп╣чФЯц┤╗уАБш┐РхКиуАБц┤╗хКиуАБчЯешпЖхТМч╛ОчЪДчГнцГЕ",
    hi: "ЁЯХ╡я╕ПрдЬреАрд╡рди, рдЧрддрд┐, рдЧрддрд┐рд╡рд┐рдзрд┐, рдЬреНрдЮрд╛рди рдФрд░ рд╕реМрдВрджрд░реНрдп рдХреЗ рдкреНрд░рддрд┐ рдЕрдкрдиреЗ рдЖрдк рдХреЛ рдЙрддреНрд╕рд╛рд╣ рд╕реЗ рднрд░реЗрдВ",
  },
  24: {
    id: "ЁЯСг Nikmati situasi wara-wiri, petualangan dan travelling",
    en: "ЁЯСг Enjoy the atmosphere of war, adventure and traveling",
    fr: "ЁЯСг Profitez de l'atmosph├иre de guerre, d'aventure et de voyage",
    es: "ЁЯСг Disfruta del ambiente de guerra, aventura y viajes.",
    ar: "ЁЯСг ╪з╪│╪к┘Е╪к╪╣ ╪и╪г╪м┘И╪з╪б ╪з┘Д╪н╪▒╪и ┘И╪з┘Д┘Е╪║╪з┘Е╪▒╪й ┘И╪з┘Д╪│┘Б╪▒",
    zh: "ЁЯСгф║лхПЧцИШф║ЙуАБхЖТщЩйхТМцЧЕшбМчЪДц░ЫхЫ┤",
    hi: "ЁЯСг рдпреБрджреНрдз, рд░реЛрдорд╛рдВрдЪ рдФрд░ рдпрд╛рддреНрд░рд╛ рдХреЗ рдорд╛рд╣реМрд▓ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ",
  },
  25: {
    id: "ЁЯХМ Berupaya adil dalam memiliki pengaruh, pemerintahan dan kekuasaan",
    en: "ЁЯХМ Striving to be fair in having influence, government and power",
    fr: "ЁЯХМ S'efforcer d'├кtre juste en mati├иre d'influence, de gouvernement et de pouvoir",
    es: "ЁЯХМ Organice cuidadosamente su estilo de vida y sus patrones comerciales para lograr la prosperidad",
    ar: "ЁЯХМ ╪▒╪к╪и ┘Ж┘Е╪╖ ╪н┘К╪з╪к┘Г ┘И╪г┘Ж┘Е╪з╪╖ ╪╣┘Е┘Д┘Г ╪и╪╣┘Ж╪з┘К╪й ┘Д╪к╪н┘В┘К┘В ╪з┘Д╪▒╪о╪з╪б",
    zh: "ЁЯХМ ч▓╛х┐ГхоЙцОТф╜ачЪДчФЯц┤╗цЦ╣х╝ПхТМхХЖф╕Ъцибх╝Пя╝МхоЮчО░ч╣БшНг",
    hi: "ЁЯХМрд╕рдореГрджреНрдзрд┐ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдЬреАрд╡рдирд╢реИрд▓реА рдФрд░ рд╡реНрдпрд╡рд╕рд╛рдп рдкреИрдЯрд░реНрди рдХреЛ рд╕рд╛рд╡рдзрд╛рдиреАрдкреВрд░реНрд╡рдХ рд╡реНрдпрд╡рд╕реНрдерд┐рдд рдХрд░реЗрдВ",
  },
  26: {
    id: "ЁЯСйтАНЁЯФз Jadikan sikap menjadi alamat baik dan berfaedah, berguna bagi banyak orang",
    en: "ЁЯСйтАНЁЯФз Turn your attitude into a good and useful address, useful for many people",
    fr: "ЁЯСйтАНЁЯФз Transformez votre attitude en une bonne adresse utile, utile ├а de nombreuses personnes",
    es: "ЁЯСйтАНЁЯФз Convierte tu actitud en un discurso bueno y ├║til, ├║til para muchas personas.",
    ar: "ЁЯСйтАНЁЯФз ╪н┘И┘Д ╪│┘Д┘И┘Г┘Г ╪е┘Д┘Й ╪о╪╖╪з╪и ╪╖┘К╪и ┘И┘Е┘Б┘К╪п╪М ┘Е┘Б┘К╪п ┘Д┘Г╪л┘К╪▒ ┘Е┘Ж ╪з┘Д┘Ж╪з╪│",
    zh: "ЁЯСйтАНЁЯФз цККф╜ачЪДцАБх║жхПШцИРф╕Аф╕кхе╜чЪДцЬЙчФичЪДхЬ░хЭАя╝Мхп╣х╛ИхдЪф║║цЬЙчФи",
    hi: "ЁЯСйтАНЁЯФзрдЕрдкрдиреЗ рджреГрд╖реНрдЯрд┐рдХреЛрдг рдХреЛ рдПрдХ рдЕрдЪреНрдЫреЗ рдФрд░ рдЙрдкрдпреЛрдЧреА рд╕рдВрдмреЛрдзрди рдореЗрдВ рдмрджрд▓реЗрдВ, рдЬреЛ рдХрдИ рд▓реЛрдЧреЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧреА рд╣реЛ",
  },
  27: {
    id: "ЁЯТк Kendalikan mental. Berjiwa gagah, kuat dan bersifat tabah",
    en: "ЁЯТк Control your mentality. Brave, strong and steadfast",
    fr: "ЁЯТк Contr├┤lez votre mentalit├й. Courageux, fort et in├йbranlable",
    es: "ЁЯТк Controla tu mentalidad. Valiente, fuerte y firme",
    ar: "ЁЯТк ╪к╪н┘Г┘Е ┘Б┘К ╪╣┘В┘Д┘К╪к┘Г. ╪┤╪м╪з╪╣ ┘И┘В┘И┘К ┘И╪╡╪з┘Е╪п",
    zh: "ЁЯТкцОзхИ╢ф╜ачЪДх┐ГцАБуАВхЛЗцХвуАБхЭЪх╝║уАБхЭЪхоЪ",
    hi: "ЁЯТкрдЕрдкрдиреА рдорд╛рдирд╕рд┐рдХрддрд╛ рдкрд░ рдирд┐рдпрдВрддреНрд░рдг рд░рдЦреЗрдВред рдмрд╣рд╛рджреБрд░, рдордЬрдмреВрдд рдФрд░ рджреГрдврд╝",
  },
  28: {
    id: "ЁЯТЮ Upayakan sikap kecintaan, ramah dan bijaklah. Tetap tidak berlebihan",
    en: "ЁЯТЮ Strive for an attitude of love, kindness and wisdom. Still don't overdo it",
    fr: "ЁЯТЮ Efforcez-vous d'adopter une attitude d'amour, de gentillesse et de sagesse. N'en faites toujours pas trop",
    es: "ЁЯТЮ Esfu├йrzate por tener una actitud de amor, bondad y sabidur├нa. Todav├нa no te excedas",
    ar: "ЁЯТХ╪з╪м╪к┘З╪п ┘Б┘К ╪з┘Д╪к╪н┘Д┘К ╪и┘Е┘И┘В┘Б ╪з┘Д╪н╪и ┘И╪з┘Д┘Д╪╖┘Б ┘И╪з┘Д╪н┘Г┘Е╪й. ┘Д╪з ╪к╪▓╪з┘Д ┘Д╪з ╪к╪и╪з┘Д╪║┘К ┘Б┘К ╪░┘Д┘Г",
    zh: "ЁЯТЮ хКкхКЫш┐╜ц▒ВчИ▒уАБф╗БцЕИхТМцЩ║цЕзчЪДцАБх║жуАВш┐ШцШпф╕НшжБхдкш┐ЗхИЖ",
    hi: "ЁЯТЮ рдкреНрд░реЗрдо, рджрдпрд╛ рдФрд░ рдЬреНрдЮрд╛рди рдХреЗ рджреГрд╖реНрдЯрд┐рдХреЛрдг рдХреЗ рд▓рд┐рдП рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред рдлрд┐рд░ рднреА рдЗрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдордд рдХрд░реЛ",
  },
  29: {
    id: "тЬНя╕П Sepenuh hatilah ketika bergelut dalam administrasi dan surat-menyurat, analisis, sastrawan, content creator/ media",
    en: "тЬНя╕П Be wholehearted when working in administration and correspondence, analysis, writers, content creators/media",
    fr: "тЬНя╕П Soyez sans r├йserve lorsque vous travaillez dans l'administration et la correspondance, l'analyse, les r├йdacteurs, les cr├йateurs de contenu/m├йdias",
    es: "тЬНя╕П Sea incondicional cuando trabaje en administraci├│n y correspondencia, an├бlisis, escritores, creadores de contenido/medios.",
    ar: "тЬНя╕П ┘Г┘Ж ┘Е╪о┘Д╪╡┘Л╪з ╪╣┘Ж╪п ╪з┘Д╪╣┘Е┘Д ┘Б┘К ╪з┘Д╪е╪п╪з╪▒╪й ┘И╪з┘Д┘Е╪▒╪з╪│┘Д╪з╪к ┘И╪з┘Д╪к╪н┘Д┘К┘Д ┘И╪з┘Д┘Г╪к╪з╪и ┘И┘Е┘Ж╪┤╪ж┘К ╪з┘Д┘Е╪н╪к┘И┘Й / ╪з┘Д┘И╪│╪з╪ж╪╖",
    zh: "тЬНя╕Пф╗Оф║ЛшбМцФ┐хТМщАЪф┐буАБхИЖцЮРуАБф╜Ьхо╢уАБхЖЕхо╣хИЫф╜ЬшАЕ/хкТф╜Ух╖еф╜ЬцЧ╢шжБхЕих┐ГхЕицДП",
    hi: "тЬНя╕П рдкреНрд░рд╢рд╛рд╕рди рдФрд░ рдкрддреНрд░рд╛рдЪрд╛рд░, рд╡рд┐рд╢реНрд▓реЗрд╖рдг, рд▓реЗрдЦрдХ, рд╕рд╛рдордЧреНрд░реА рдирд┐рд░реНрдорд╛рддрд╛/рдореАрдбрд┐рдпрд╛ рдореЗрдВ рдХрд╛рдо рдХрд░рддреЗ рд╕рдордп рдкреВрд░реЗ рджрд┐рд▓ рд╕реЗ рдХрд╛рдо рдХрд░реЗрдВ",
  },
  30: {
    id: "ЁЯда Berada dalam dunia sendiri, menata dunianya sendiri (nyata)/maya (meditasi, kontemplasi, spiritual)",
    en: "ЁЯда Being in your own world, organizing your own world (real)/virtual (meditation, contemplation, spiritual)",
    fr: "ЁЯда ├Кtre dans son propre monde, organiser son propre monde (r├йel)/virtuel (m├йditation, contemplation, spirituel)",
    es: "ЁЯда Estar en tu propio mundo, organizar tu propio mundo (real)/virtual (meditaci├│n, contemplaci├│n, espiritual)",
    ar: "ЁЯда ╪г┘Ж ╪к┘Г┘И┘Ж ┘Б┘К ╪╣╪з┘Д┘Е┘Г ╪з┘Д╪о╪з╪╡╪М ╪к┘Ж╪╕┘Е ╪╣╪з┘Д┘Е┘Г ╪з┘Д╪о╪з╪╡ (╪з┘Д╪н┘В┘К┘В┘К)/╪з┘Д╪з┘Б╪к╪▒╪з╪╢┘К (╪з┘Д╪к╪г┘Е┘Д╪М ╪з┘Д╪к╪г┘Е┘Д╪М ╪з┘Д╪▒┘И╪н┘К)",
    zh: "ЁЯда ц┤╗хЬишЗкх╖▒чЪДф╕ЦчХМщЗМя╝Мч╗Дч╗ЗшЗкх╖▒чЪДф╕ЦчХМя╝ИчЬЯхоЮя╝Й/шЩЪцЛЯя╝ИхЖецГ│уАБц▓ЙцАЭуАБч▓╛чеЮя╝Й",
    hi: "ЁЯдардЕрдкрдиреА рджреБрдирд┐рдпрд╛ рдореЗрдВ рд░рд╣рдирд╛, рдЕрдкрдиреА рджреБрдирд┐рдпрд╛ рдХреЛ рд╡реНрдпрд╡рд╕реНрдерд┐рдд рдХрд░рдирд╛ (рд╡рд╛рд╕реНрддрд╡рд┐рдХ)/рдЖрднрд╛рд╕реА (рдзреНрдпрд╛рди, рдЪрд┐рдВрддрди, рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ)",
  },
  31: {
    id: "ЁЯдЧ Tanamkan sifat baik hati, kasih sayang dan berlatih menghasilkan kesempurnaan",
    en: "ЁЯдЧ Cultivate kindness, compassion and practice to produce perfection",
    fr: "ЁЯдЧ Cultivez la gentillesse, la compassion et la pratique pour produire la perfection",
    es: "ЁЯдЧ Cultive la bondad, la compasi├│n y practique para producir la perfecci├│n.",
    ar: "ЁЯдЧ ╪▓╪▒╪з╪╣╪й ╪з┘Д┘Д╪╖┘Б ┘И╪з┘Д╪▒╪н┘Е╪й ┘И╪з┘Д┘Е┘Е╪з╪▒╪│╪й ┘Д╪е┘Ж╪к╪з╪м ╪з┘Д┘Г┘Е╪з┘Д",
    zh: "ЁЯдЧ хЯ╣хЕ╗цЕИцВ▓х┐ГхТМф┐ошбМф╗еш╛╛хИ░хоМч╛О",
    hi: "ЁЯдЧ рджрдпрд╛, рдХрд░реБрдгрд╛ рдХрд╛ рд╡рд┐рдХрд╛рд╕ рдХрд░реЗрдВ рдФрд░ рдкреВрд░реНрдгрддрд╛ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ",
  },
  32: {
    id: "ЁЯТк Potensi berfisik prima, bertenaga dan kekuatan (daya pengaruh besar)",
    en: "ЁЯТк Excellent physical potential, energy and strength (great influence)",
    fr: "ЁЯТк Excellent potentiel physique, ├йnergie et force (grande influence)",
    es: "ЁЯТк Excelente potencial f├нsico, energ├нa y fuerza (gran influencia)",
    ar: "ЁЯТк ╪е┘Е┘Г╪з┘Ж╪з╪к ╪и╪п┘Ж┘К╪й ┘И╪╖╪з┘В╪й ┘И┘В┘И╪й ┘Е┘Е╪к╪з╪▓╪й (╪к╪г╪л┘К╪▒ ┘Г╪и┘К╪▒)",
    zh: "ЁЯТк хЗ║шЙ▓чЪДш║лф╜Уц╜ЬхКЫуАБч▓╛хКЫхТМхКЫщЗПя╝Их╜▒хУНхКЫх╛Ихдзя╝Й",
    hi: "ЁЯТк рдЙрддреНрдХреГрд╖реНрдЯ рд╢рд╛рд░реАрд░рд┐рдХ рдХреНрд╖рдорддрд╛, рдКрд░реНрдЬрд╛ рдФрд░ рд╢рдХреНрддрд┐ (рдорд╣рд╛рди рдкреНрд░рднрд╛рд╡)",
  },
  33: {
    id: "ЁЯЩЗ Cara atau ketelitian yang amat sangat, namun jaga keseimbangan perilaku dan pola",
    en: "ЁЯЩЗ Extremely thorough, but maintain a balance in behavior and patterns",
    fr: "ЁЯЩЗ Extr├кmement minutieux, mais maintenir un ├йquilibre dans les comportements et les mod├иles",
    es: "ЁЯЩЗ Extremadamente minucioso, pero mantiene un equilibrio en el comportamiento y los patrones.",
    ar: "ЁЯЩЗ ╪п┘В┘К┘В ┘Д┘Д╪║╪з┘К╪й╪М ┘И┘Д┘Г┘Ж ┘К╪н╪з┘Б╪╕ ╪╣┘Д┘Й ╪з┘Д╪к┘И╪з╪▓┘Ж ┘Б┘К ╪з┘Д╪│┘Д┘И┘Г ┘И╪з┘Д╪г┘Ж┘Е╪з╪╖",
    zh: "ЁЯЩЗ щЭЮх╕╕х╜╗х║Хя╝Мф╜ЖхЬишбМф╕║хТМцибх╝Пф╕Кф┐ЭцМБх╣│шбб",
    hi: "ЁЯЩЗ рдЕрддреНрдпрдВрдд рдЧрд╣рди, рд▓реЗрдХрд┐рди рд╡реНрдпрд╡рд╣рд╛рд░ рдФрд░ рдкреИрдЯрд░реНрди рдореЗрдВ рд╕рдВрддреБрд▓рди рдмрдирд╛рдП рд░рдЦреЗрдВ",
  },
  35: {
    id: "ЁЯТЮ Upayakan sikap kecintaan, ramah dan bijaklah. Tetap tidak berlebihan",
    en: "ЁЯТЮ Strive for an attitude of love, kindness and wisdom. Still don't overdo it",
    fr: "ЁЯТЮ Efforcez-vous d'adopter une attitude d'amour, de gentillesse et de sagesse. N'en faites toujours pas trop",
    es: "ЁЯТЮ Esfu├йrzate por tener una actitud de amor, bondad y sabidur├нa. Todav├нa no te excedas",
    ar: "ЁЯТЮ╪з╪м╪к┘З╪п ┘Б┘К ╪з┘Д╪к╪н┘Д┘К ╪и┘Е┘И┘В┘Б ╪з┘Д╪н╪и ┘И╪з┘Д┘Д╪╖┘Б ┘И╪з┘Д╪н┘Г┘Е╪й. ┘Д╪з ╪к╪▓╪з┘Д ┘Д╪з ╪к╪и╪з┘Д╪║┘К ┘Б┘К ╪░┘Д┘Г",
    zh: "ЁЯТЮ хКкхКЫш┐╜ц▒ВчИ▒уАБф╗БцЕИхТМцЩ║цЕзчЪДцАБх║жуАВш┐ШцШпф╕НшжБхдкш┐ЗхИЖ",
    hi: "ЁЯТЮ рдкреНрд░реЗрдо, рджрдпрд╛ рдФрд░ рдЬреНрдЮрд╛рди рдХреЗ рджреГрд╖реНрдЯрд┐рдХреЛрдг рдХреЗ рд▓рд┐рдП рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред рдлрд┐рд░ рднреА рдЗрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдордд рдХрд░реЛ",
  },
  36: {
    id: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Ciptakan jalan hidup manis, hidup rukun dalam berumahtangga. Komunikasi intens",
    en: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Create a sweet way of life, live in harmony in a household. Intense communication",
    fr: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Cr├йer une douceur de vivre, vivre en harmonie dans un foyer. Communication intense",
    es: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Crea una dulce forma de vida, vive en armon├нa en un hogar. comunicaci├│n intensa",
    ar: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж ╪з╪╡┘Ж╪╣ ╪г╪│┘Д┘И╪и ╪н┘К╪з╪й ╪м┘Е┘К┘Д╪М ┘И╪╣╪┤ ┘Б┘К ┘И╪ж╪з┘Е ┘Б┘К ╪з┘Д┘Е┘Ж╪▓┘Д. ╪з┘Д╪к┘И╪з╪╡┘Д ╪з┘Д┘Е┘Г╪л┘Б",
    zh: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСжхИЫщАачФЬшЬЬчФЯц┤╗цЦ╣х╝Пя╝МхТМчЭжчЫ╕хдДуАВхпЖхИЗц▓ЯщАЪ",
    hi: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж рдордзреБрд░ рдЬреАрд╡рди рд╢реИрд▓реА рдмрдирд╛рдПрдВ, рдШрд░-рдкрд░рд┐рд╡рд╛рд░ рдореЗрдВ рд╕рджреНрднрд╛рд╡ рд╕реЗ рд░рд╣реЗрдВред рдЧрд╣рди рд╕рдВрдЪрд╛рд░",
  },
  40: {
    id: "ЁЯХМ Potensi berpengaruh dalam lingkungan agamais, tokoh agama",
    en: "ЁЯХМ Potential influence in religious circles, religious figures",
    fr: "ЁЯХМ Influence potentielle dans les milieux religieux, personnalit├йs religieuses",
    es: "ЁЯХМ Influencia potencial en c├нrculos religiosos, figuras religiosas.",
    ar: "ЁЯХМ ╪з┘Д╪к╪г╪л┘К╪▒ ╪з┘Д┘Е╪н╪к┘Е┘Д ┘Б┘К ╪з┘Д╪г┘И╪│╪з╪╖ ╪з┘Д╪п┘К┘Ж┘К╪й ┘И╪з┘Д╪┤╪о╪╡┘К╪з╪к ╪з┘Д╪п┘К┘Ж┘К╪й",
    zh: "ЁЯХМ хЬихоЧцХЩчХМуАБхоЧцХЩф║║хглф╕нчЪДц╜ЬхЬих╜▒хУНхКЫ",
    hi: "ЁЯХМрдзрд╛рд░реНрдорд┐рдХ рдордВрдбрд▓рд┐рдпреЛрдВ, рдзрд╛рд░реНрдорд┐рдХ рд╣рд╕реНрддрд┐рдпреЛрдВ рдореЗрдВ рд╕рдВрднрд╛рд╡рд┐рдд рдкреНрд░рднрд╛рд╡",
  },
  43: {
    id: "ЁЯТО Jagalah selalu kebersihan dan kesucian diri baik jasmani maupun rohani",
    en: "ЁЯТО Always keep yourself clean and pure, both physically and spiritually",
    fr: "ЁЯТО Gardez-vous toujours propre et pur, tant physiquement que spirituellement",
    es: "ЁЯТО Mantente siempre limpio y puro, tanto f├нsica como espiritualmente.",
    ar: "ЁЯТО ╪н╪з┘Б╪╕ ╪п╪з╪ж┘Е┘Л╪з ╪╣┘Д┘Й ┘Ж╪╕╪з┘Б╪к┘Г ┘И┘Ж┘В╪з╪ж┘Г ╪м╪│╪п┘К┘Л╪з ┘И╪▒┘И╪н┘К┘Л╪з",
    zh: "ЁЯТО хзЛч╗Иф┐ЭцМБшЗкх╖▒ш║лф╜УхТМч▓╛чеЮф╕КчЪДц╕Ец┤БхТМч║пц┤Б",
    hi: "ЁЯТОрдЦреБрдж рдХреЛ рд╣рдореЗрд╢рд╛ рд╢рд╛рд░реАрд░рд┐рдХ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд░реВрдк рд╕реЗ рд╕реНрд╡рдЪреНрдЫ рдФрд░ рд╢реБрджреНрдз рд░рдЦреЗрдВ",
  },
  44: {
    id: "ЁЯдЧ Tanamkan sifat baik hati, kasih sayang dan berlatih menghasilkan kesempurnaan",
    en: "ЁЯдЧ Cultivate kindness, compassion and practice to produce perfection",
    fr: "ЁЯдЧ Cultivez la gentillesse, la compassion et la pratique pour produire la perfection",
    es: "ЁЯдЧ Cultive la bondad, la compasi├│n y practique para producir la perfecci├│n.",
    ar: "ЁЯдЧ ╪▓╪▒╪з╪╣╪й ╪з┘Д┘Д╪╖┘Б ┘И╪з┘Д╪▒╪н┘Е╪й ┘И╪з┘Д┘Е┘Е╪з╪▒╪│╪й ┘Д╪е┘Ж╪к╪з╪м ╪з┘Д┘Г┘Е╪з┘Д",
    zh: "ЁЯдЧ хЯ╣хЕ╗цЕИцВ▓х┐ГхТМф┐ошбМф╗еш╛╛хИ░хоМч╛О",
    hi: "ЁЯдЧ рджрдпрд╛, рдХрд░реБрдгрд╛ рдХрд╛ рд╡рд┐рдХрд╛рд╕ рдХрд░реЗрдВ рдФрд░ рдкреВрд░реНрдгрддрд╛ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ",
  },
  45: {
    id: "ЁЯТк Potensi berfisik prima, bertenaga dan kekuatan (daya pengaruh besar)",
    en: "ЁЯТк Excellent physical potential, energy and strength (great influence)",
    fr: "ЁЯТк Excellent potentiel physique, ├йnergie et force (grande influence)",
    es: "ЁЯТк Excelente potencial f├нsico, energ├нa y fuerza (gran influencia)",
    ar: "ЁЯТк ╪е┘Е┘Г╪з┘Ж╪з╪к ╪и╪п┘Ж┘К╪й ┘И╪╖╪з┘В╪й ┘И┘В┘И╪й ┘Е┘Е╪к╪з╪▓╪й (╪к╪г╪л┘К╪▒ ┘Г╪и┘К╪▒)",
    zh: "ЁЯТк хЗ║шЙ▓чЪДш║лф╜Уц╜ЬхКЫуАБч▓╛хКЫхТМхКЫщЗПя╝Их╜▒хУНхКЫх╛Ихдзя╝Й",
    hi: "ЁЯТк рдЙрддреНрдХреГрд╖реНрдЯ рд╢рд╛рд░реАрд░рд┐рдХ рдХреНрд╖рдорддрд╛, рдКрд░реНрдЬрд╛ рдФрд░ рд╢рдХреНрддрд┐ (рдорд╣рд╛рди рдкреНрд░рднрд╛рд╡)",
  },
  46: {
    id: "ЁЯда Keangkeran, memiliki pengaruh, pemerintahan dan potensi kekuasaan",
    en: "ЁЯда Awesomeness, having influence, governance and potential power",
    fr: "ЁЯда G├йnialit├й, avoir de l'influence, de la gouvernance et du pouvoir potentiel",
    es: "ЁЯда Genialidad, tener influencia, gobernanza y poder potencial.",
    ar: "ЁЯда ╪з┘Д╪▒┘И╪╣╪й ┘И╪з┘Е╪к┘Д╪з┘Г ╪з┘Д┘Ж┘Б┘И╪░ ┘И╪з┘Д╪н┘Г┘Е ┘И╪з┘Д┘В┘И╪й ╪з┘Д┘Е╪н╪к┘Е┘Д╪й",
    zh: "ЁЯда ф╗дф║║цХмчХПя╝МцЬЙх╜▒хУНхКЫуАБц▓╗чРЖхКЫхТМц╜ЬхЬицЭГхКЫ",
    hi: "ЁЯдардЕрджреНрднреБрддрддрд╛, рдкреНрд░рднрд╛рд╡, рд╢рд╛рд╕рди рдФрд░ рд╕рдВрднрд╛рд╡рд┐рдд рд╢рдХреНрддрд┐ рд╕реЗ рдпреБрдХреНрдд",
  },
  47: {
    id: "тШ║я╕П Berkasih sayang, sangat pengasih, pengampunan",
    en: "тШ║я╕П Compassionate, very loving, forgiving",
    fr: "тШ║я╕П Compatissant, tr├иs aimant, indulgent",
    es: "тШ║я╕П Compasivo, muy cari├▒oso, perdonador.",
    ar: "тШ║я╕П ╪▒╪н┘К┘Е╪М ┘Е╪н╪и ┘Д┘Д╪║╪з┘К╪й╪М ┘Е╪к╪│╪з┘Е╪н",
    zh: "тШ║я╕ПхпМцЬЙхРМцГЕх┐Гя╝МщЭЮх╕╕цЬЙчИ▒х┐Гя╝Мхо╜хо╣",
    hi: "тШ║я╕П рджрдпрд╛рд▓реБ, рдЕрддреНрдпрдВрдд рдкреНрд░реЗрдордордп, рдХреНрд╖рдорд╛рд╢реАрд▓",
  },
  50: {
    id: "ЁЯЩП Yakinlah dengan tuhan atas pengampunan, kebebasan dan kemerdekaan",
    en: "ЁЯЩП Have faith in God for forgiveness, freedom and liberty",
    fr: "ЁЯЩП Ayez foi en Dieu pour le pardon, la libert├й et la libert├й",
    es: "ЁЯЩП Ten fe en Dios para el perd├│n, la libertad y la independencia.",
    ar: "ЁЯЩП╪л┘В ╪и╪з┘Д┘Д┘З ┘Е┘Ж ╪г╪м┘Д ╪з┘Д┘Е╪║┘Б╪▒╪й ┘И╪з┘Д╪н╪▒┘К╪й ┘И╪з┘Д╪з╪│╪к┘В┘Д╪з┘Д",
    zh: "ЁЯЩП чЫ╕ф┐бф╕Кх╕ЭчЪДхо╜цБХуАБшЗкчФ▒хТМчЛмчлЛ",
    hi: "ЁЯЩП рдХреНрд╖рдорд╛, рдореБрдХреНрддрд┐ рдФрд░ рд╕реНрд╡рддрдВрддреНрд░рддрд╛ рдХреЗ рд▓рд┐рдП рдИрд╢реНрд╡рд░ рдкрд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рд░рдЦреЗрдВ",
  },
  70: {
    id: "ЁЯзЧ Penuhi diri dengan Semangat dalam hidup, bergerak, aktif, pengetahuan dan keindahan",
    en: "ЁЯзЧ Fill yourself with enthusiasm for life, movement, activity, knowledge and beauty",
    fr: "ЁЯзЧ Remplissez-vous d'enthousiasme pour la vie, le mouvement, l'activit├й, la connaissance et la beaut├й",
    es: "ЁЯзЧ Ll├йnate de entusiasmo por la vida, el movimiento, la actividad, el conocimiento y la belleza.",
    ar: "ЁЯзЧ ╪з┘Е┘Д╪г ┘Ж┘Б╪│┘Г ╪и╪з┘Д╪н┘Е╪з╪│ ┘Д┘Д╪н┘К╪з╪й ┘И╪з┘Д╪н╪▒┘Г╪й ┘И╪з┘Д┘Ж╪┤╪з╪╖ ┘И╪з┘Д┘Е╪╣╪▒┘Б╪й ┘И╪з┘Д╪м┘Е╪з┘Д",
    zh: "ЁЯзЧ шойшЗкх╖▒хЕЕц╗бхп╣чФЯц┤╗уАБш┐РхКиуАБц┤╗хКиуАБчЯешпЖхТМч╛ОчЪДчГнцГЕ",
    hi: "ЁЯзЧрдЬреАрд╡рди, рдЧрддрд┐, рдЧрддрд┐рд╡рд┐рдзрд┐, рдЬреНрдЮрд╛рди рдФрд░ рд╕реМрдВрджрд░реНрдп рдХреЗ рдкреНрд░рддрд┐ рдЕрдкрдиреЗ рдЖрдк рдХреЛ рдЙрддреНрд╕рд╛рд╣ рд╕реЗ рднрд░реЗрдВ",
  },
  75: {
    id: "ЁЯПЗ Berada dalam dunia sendiri, menata dunianya sendiri (nyata)/maya (meditasi, kontemplasi, spiritual)",
    en: "ЁЯПЗ Being in your own world, organizing your own world (real)/virtual (meditation, contemplation, spiritual)",
    fr: "ЁЯПЗ ├Кtre dans son propre monde, organiser son propre monde (r├йel)/virtuel (m├йditation, contemplation, spirituel)",
    es: "ЁЯПЗ Estar en tu propio mundo, organizar tu propio mundo (real)/virtual (meditaci├│n, contemplaci├│n, espiritual)",
    ar: "ЁЯПЗ ╪г┘Ж ╪к┘Г┘И┘Ж ┘Б┘К ╪╣╪з┘Д┘Е┘Г ╪з┘Д╪о╪з╪╡╪М ╪к┘Ж╪╕┘Е ╪╣╪з┘Д┘Е┘Г ╪з┘Д╪о╪з╪╡ (╪з┘Д╪н┘В┘К┘В┘К)/╪з┘Д╪з┘Б╪к╪▒╪з╪╢┘К (╪з┘Д╪к╪г┘Е┘Д╪М ╪з┘Д╪к╪г┘Е┘Д╪М ╪з┘Д╪▒┘И╪н┘К)",
    zh: "ЁЯПЗ ц┤╗хЬишЗкх╖▒чЪДф╕ЦчХМщЗМя╝Мч╗Дч╗ЗшЗкх╖▒чЪДф╕ЦчХМя╝ИчЬЯхоЮя╝Й/шЩЪцЛЯя╝ИхЖецГ│уАБц▓ЙцАЭуАБч▓╛чеЮя╝Й",
    hi: "ЁЯПЗ рдЕрдкрдиреА рджреБрдирд┐рдпрд╛ рдореЗрдВ рд░рд╣рдирд╛, рдЕрдкрдиреА рджреБрдирд┐рдпрд╛ рдХреЛ рд╡реНрдпрд╡рд╕реНрдерд┐рдд рдХрд░рдирд╛ (рд╡рд╛рд╕реНрддрд╡рд┐рдХ)/рдЖрднрд╛рд╕реА (рдзреНрдпрд╛рди, рдЪрд┐рдВрддрди, рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ)",
  },
  81: {
    id: "ЁЯТГ Latih diri dalam Keahlian dalam ilmu seni, artistik, berjiwa seni",
    en: "ЁЯТГ Train yourself in skills in art, artistic knowledge, artistic spirit",
    fr: "ЁЯТГ Formez-vous aux comp├йtences en art, aux connaissances artistiques, ├а l'esprit artistique",
    es: "ЁЯТГ F├│rmate en habilidades en el arte, conocimientos art├нsticos, esp├нritu art├нstico.",
    ar: "ЁЯТГ ╪п╪▒╪и ┘Ж┘Б╪│┘Г ╪╣┘Д┘Й ┘Е┘З╪з╪▒╪з╪к ╪з┘Д┘Б┘Ж ┘И╪з┘Д┘Е╪╣╪▒┘Б╪й ╪з┘Д┘Б┘Ж┘К╪й ┘И╪з┘Д╪▒┘И╪н ╪з┘Д┘Б┘Ж┘К╪й",
    zh: "ЁЯТГ шонч╗ГшЗкх╖▒чЪДшЙ║цЬпцКАшГ╜уАБшЙ║цЬпчЯешпЖуАБшЙ║цЬпч▓╛чеЮ",
    hi: "ЁЯТГ рдХрд▓рд╛, рдХрд▓рд╛рддреНрдордХ рдЬреНрдЮрд╛рди, рдХрд▓рд╛рддреНрдордХ рднрд╛рд╡рдирд╛ рдореЗрдВ рдХреМрд╢рд▓ рдореЗрдВ рдЦреБрдж рдХреЛ рдкреНрд░рд╢рд┐рдХреНрд╖рд┐рдд рдХрд░реЗрдВ",
  },
  100: {
    id: "ЁЯШЗ Taatlah agar mendapat keberkahan yang maha Agung",
    en: "ЁЯШЗ Be obedient to get the greatest blessings",
    fr: "ЁЯШЗ Soyez ob├йissant pour obtenir les plus grandes b├йn├йdictions",
    es: "ЁЯШЗ Se obediente para obtener las mayores bendiciones.",
    ar: "ЁЯШЗ ┘Г┘Ж ╪╣┘Д┘Й ╪╖╪з╪╣╪й ┘Д╪к╪н╪╡┘Д ╪╣┘Д┘Й ╪г╪╣╪╕┘Е ╪з┘Д┘Ж╪╣┘Е",
    zh: "ЁЯШЗ щб║цЬНцЙНшГ╜х╛ЧхИ░цЬАхдзчЪДчжПцКе",
    hi: "ЁЯШЗрд╕рдмрд╕реЗ рдмрдбрд╝рд╛ рдЖрд╢реАрд░реНрд╡рд╛рдж рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдЬреНрдЮрд╛рдХрд╛рд░реА рдмрдиреЗрдВ",
  },
  120: {
    id: "ЁЯПЭя╕П Semangat cinta negeri kampung halaman, gemar melakukan kebaikan",
    en: "ЁЯПЭя╕П Spirit of love for your hometown, likes to do good",
    fr: "ЁЯПЭя╕П Esprit d'amour pour ta ville natale, aime faire le bien",
    es: "ЁЯПЭя╕ПEsp├нritu de amor por tu ciudad natal, le gusta hacer el bien",
    ar: "ЁЯПЭя╕П ╪▒┘И╪н ┘Е╪н╪и╪й ┘Д┘Е╪│┘В╪╖ ╪▒╪г╪│┘Г╪М ╪к╪н╪и ┘Б╪╣┘Д ╪з┘Д╪о┘К╪▒",
    zh: "ЁЯПЭя╕ПчГнчИ▒хо╢ф╣буАБхЦЬцмвшбМхЦДчЪДч▓╛чеЮ",
    hi: "ЁЯПЭя╕П рдЕрдкрдиреЗ рдЧреГрд╣рдирдЧрд░ рдХреЗ рдкреНрд░рддрд┐ рдкреНрд░реЗрдо рдХреА рднрд╛рд╡рдирд╛, рдЕрдЪреНрдЫрд╛ рдХрд░рдирд╛ рдкрд╕рдВрдж рдХрд░рддреА рд╣реИ",
  },
  300: {
    id: "ЁЯС╝ Potensi hidup sentausa, kepercayaan dan sifat suka ilmu pengetahuan",
    en: "ЁЯС╝ Potential for eternal life, trust and love of knowledge",
    fr: "ЁЯС╝ Potentiel de vie ├йternelle, de confiance et d'amour de la connaissance",
    es: "ЁЯС╝ Potencial de vida eterna, confianza y amor al conocimiento.",
    ar: "ЁЯС╝╪е┘Е┘Г╪з┘Ж┘К╪й ╪з┘Д╪н┘К╪з╪й ╪з┘Д╪г╪и╪п┘К╪й ┘И╪з┘Д╪л┘В╪й ┘И╪н╪и ╪з┘Д┘Е╪╣╪▒┘Б╪й",
    zh: "ЁЯС╝ ц░╕чФЯчЪДц╜ЬхКЫуАБхп╣чЯешпЖчЪДф┐бф╗╗хТМчГнчИ▒",
    hi: "ЁЯС╝рдЕрдирдиреНрдд рдЬреАрд╡рди, рд╡рд┐рд╢реНрд╡рд╛рд╕ рдФрд░ рдЬреНрдЮрд╛рди рдХреЗ рдкреНрд░реЗрдо рдХреА рд╕рдВрднрд╛рд╡рдирд╛",
  },
  318: {
    id: "ЁЯШЗ Titah utusan yang maha Agung, menjaga amanah",
    en: "ЁЯШЗ The command of the Almighty Messenger, guarding the trust",
    fr: "ЁЯШЗ Le commandement du Messager Tout-Puissant, gardant la confiance",
    es: "ЁЯШЗ La orden del Mensajero Todopoderoso, guardando la confianza",
    ar: "ЁЯШЗ╪з┘Е╪▒ ╪з┘Д╪▒╪│┘И┘Д ╪к╪╣╪з┘Д┘Й ╪и╪н╪▒╪з╪│╪й ╪з┘Д╪г┘Е╪з┘Ж╪й",
    zh: "ЁЯШЗ хЕишГ╜ф╜┐шАЕчЪДхС╜ф╗дя╝МхоИцКдф┐бф╗╗",
    hi: "ЁЯШЗ рд╕рд░реНрд╡рд╢рдХреНрддрд┐рдорд╛рди рджреВрдд рдХрд╛ рдЖрджреЗрд╢, рдЕрдорд╛рдирдд рдХреА рд░рдЦрд╡рд╛рд▓реА",
  },
  360: {
    id: "ЁЯдЭ Potensi pada lingkungan rumah, rombongan dan suka berkawan, bentuk komunitas",
    en: "ЁЯдЭ Potential in the home environment, groups and friends, forming a community",
    fr: "ЁЯдЭ Potentiel dans l'environnement familial, les groupes et les amis, formant une communaut├й",
    es: "ЁЯдЭ Potencial en el entorno hogare├▒o, grupos y amigos, formando comunidad",
    ar: "ЁЯдЭ╪з┘Д╪е┘Е┘Г╪з┘Ж╪з╪к ┘Б┘К ╪з┘Д╪и┘К╪ж╪й ╪з┘Д┘Е┘Ж╪▓┘Д┘К╪й ┘И╪з┘Д┘Е╪м┘Е┘И╪╣╪з╪к ┘И╪з┘Д╪г╪╡╪п┘В╪з╪б ┘И╪к┘Г┘И┘К┘Ж ┘Е╪м╪к┘Е╪╣",
    zh: "ЁЯдЭ хо╢х║нчОпхвГуАБхЫвф╜УхТМцЬЛхПЛчЪДц╜ЬхКЫя╝Мх╜вцИРчд╛хМ║",
    hi: "ЁЯдЭрдШрд░реЗрд▓реВ рдорд╛рд╣реМрд▓, рд╕рдореВрд╣реЛрдВ рдФрд░ рджреЛрд╕реНрддреЛрдВ рдореЗрдВ рдПрдХ рд╕рдореБрджрд╛рдп рдмрдирд╛рдиреЗ рдХреА рдХреНрд╖рдорддрд╛",
  },
  365: {
    id: "ЁЯСБя╕П Berpotensi menyukai dan mengamati alam, suka ilmu bintang (ilmu fisika alam)",
    en: "ЁЯСБя╕П Potential to like and observe nature, likes star science (natural physics)",
    fr: "ЁЯСБя╕П Potentiel d'aimer et d'observer la nature, aime la science des ├йtoiles (physique naturelle)",
    es: "ЁЯСБя╕П Potencial para gustarle y observar la naturaleza, le gusta la ciencia estelar (f├нsica natural)",
    ar: "ЁЯСБя╕П ╪е┘Е┘Г╪з┘Ж┘К╪й ╪з┘Д╪е╪╣╪м╪з╪и ╪и╪з┘Д╪╖╪и┘К╪╣╪й ┘И┘Е╪▒╪з┘В╪и╪к┘З╪з╪М ┘К╪н╪и ╪╣┘Д┘Е ╪з┘Д┘Ж╪м┘И┘Е (╪з┘Д┘Б┘К╪▓┘К╪з╪б ╪з┘Д╪╖╪и┘К╪╣┘К╪й)",
    zh: "ЁЯСБя╕П цЬЙхЦЬцмвхТМшзВхпЯшЗкчД╢чЪДц╜ЬхКЫя╝МхЦЬцмвцШОцШЯчзСхнжя╝ИшЗкчД╢чЙйчРЖя╝Й",
    hi: "ЁЯСБя╕П рдкреНрд░рдХреГрддрд┐ рдХреЛ рдкрд╕рдВрдж рдХрд░рдиреЗ рдФрд░ рдЙрд╕рдХрд╛ рдЕрд╡рд▓реЛрдХрди рдХрд░рдиреЗ рдХреА рдХреНрд╖рдорддрд╛, рддрд╛рд░рд╛ рд╡рд┐рдЬреНрдЮрд╛рди (рдкреНрд░рд╛рдХреГрддрд┐рдХ рднреМрддрд┐рдХреА) рдкрд╕рдВрдж рд╣реИ",
  },
  490: {
    id: "ЁЯХМ Potensi berpengaruh dalam lingkungan agamais, tokoh agama",
    en: "ЁЯХМ Potential influence in religious circles, religious figures",
    fr: "ЁЯХМ Influence potentielle dans les milieux religieux, personnalit├йs religieuses",
    es: "ЁЯХМ Influencia potencial en c├нrculos religiosos, figuras religiosas.",
    ar: "ЁЯХМ ╪з┘Д╪к╪г╪л┘К╪▒ ╪з┘Д┘Е╪н╪к┘Е┘Д ┘Б┘К ╪з┘Д╪г┘И╪│╪з╪╖ ╪з┘Д╪п┘К┘Ж┘К╪й ┘И╪з┘Д╪┤╪о╪╡┘К╪з╪к ╪з┘Д╪п┘К┘Ж┘К╪й",
    zh: "ЁЯХМ хЬихоЧцХЩчХМуАБхоЧцХЩф║║хглф╕нчЪДц╜ЬхЬих╜▒хУНхКЫ",
    hi: "ЁЯХМрдзрд╛рд░реНрдорд┐рдХ рдордВрдбрд▓рд┐рдпреЛрдВ, рдзрд╛рд░реНрдорд┐рдХ рд╣рд╕реНрддрд┐рдпреЛрдВ рдореЗрдВ рд╕рдВрднрд╛рд╡рд┐рдд рдкреНрд░рднрд╛рд╡",
  },
  500: {
    id: "ЁЯТО Jagalah selalu kebersihan dan kesucian diri baik jasmani maupun rohani",
    en: "ЁЯТО Always keep yourself clean and pure, both physically and spiritually",
    fr: "ЁЯТО Gardez-vous toujours propre et pur, tant physiquement que spirituellement",
    es: "ЁЯТО Mantente siempre limpio y puro, tanto f├нsica como espiritualmente.",
    ar: "ЁЯТО ╪н╪з┘Б╪╕ ╪п╪з╪ж┘Е┘Л╪з ╪╣┘Д┘Й ┘Ж╪╕╪з┘Б╪к┘Г ┘И┘Ж┘В╪з╪ж┘Г ╪м╪│╪п┘К┘Л╪з ┘И╪▒┘И╪н┘К┘Л╪з",
    zh: "ЁЯТО хзЛч╗Иф┐ЭцМБшЗкх╖▒ш║лф╜УхТМч▓╛чеЮф╕КчЪДц╕Ец┤БхТМч║пц┤Б",
    hi: "ЁЯТОрдЦреБрдж рдХреЛ рд╣рдореЗрд╢рд╛ рд╢рд╛рд░реАрд░рд┐рдХ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд░реВрдк рд╕реЗ рд╕реНрд╡рдЪреНрдЫ рдФрд░ рд╢реБрджреНрдз рд░рдЦреЗрдВ",
  },
  600: {
    id: "ЁЯдЧ Tanamkan sifat baik hati, kasih sayang dan berlatih menghasilkan kesempurnaan",
    en: "ЁЯдЧ Cultivate kindness, compassion and practice to produce perfection",
    fr: "ЁЯдЧ Cultivez la gentillesse, la compassion et la pratique pour produire la perfection",
    es: "ЁЯдЧ Cultive la bondad, la compasi├│n y practique para producir la perfecci├│n.",
    ar: "ЁЯдЧ ╪▓╪▒╪з╪╣╪й ╪з┘Д┘Д╪╖┘Б ┘И╪з┘Д╪▒╪н┘Е╪й ┘И╪з┘Д┘Е┘Е╪з╪▒╪│╪й ┘Д╪е┘Ж╪к╪з╪м ╪з┘Д┘Г┘Е╪з┘Д",
    zh: "ЁЯдЧ хЯ╣хЕ╗цЕИцВ▓х┐ГхТМф┐ошбМф╗еш╛╛хИ░хоМч╛О",
    hi: "ЁЯдЧ рджрдпрд╛, рдХрд░реБрдгрд╛ рдХрд╛ рд╡рд┐рдХрд╛рд╕ рдХрд░реЗрдВ рдФрд░ рдкреВрд░реНрдгрддрд╛ рдЙрддреНрдкрдиреНрди рдХрд░рдиреЗ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ",
  },
  700: {
    id: "ЁЯТк Potensi berfisik prima, bertenaga dan kekuatan (daya pengaruh besar)",
    en: "ЁЯТк Excellent physical potential, energy and strength (great influence)",
    fr: "ЁЯТк Excellent potentiel physique, ├йnergie et force (grande influence)",
    es: "ЁЯТк Excelente potencial f├нsico, energ├нa y fuerza (gran influencia)",
    ar: "ЁЯТк ╪е┘Е┘Г╪з┘Ж╪з╪к ╪и╪п┘Ж┘К╪й ┘И╪╖╪з┘В╪й ┘И┘В┘И╪й ┘Е┘Е╪к╪з╪▓╪й (╪к╪г╪л┘К╪▒ ┘Г╪и┘К╪▒)",
    zh: "ЁЯТк хЗ║шЙ▓чЪДш║лф╜Уц╜ЬхКЫуАБч▓╛хКЫхТМхКЫщЗПя╝Их╜▒хУНхКЫх╛Ихдзя╝Й",
    hi: "ЁЯТк рдЙрддреНрдХреГрд╖реНрдЯ рд╢рд╛рд░реАрд░рд┐рдХ рдХреНрд╖рдорддрд╛, рдКрд░реНрдЬрд╛ рдФрд░ рд╢рдХреНрддрд┐ (рдорд╣рд╛рди рдкреНрд░рднрд╛рд╡)",
  },
  800: {
    id: "ЁЯда Keangkeran, memiliki pengaruh, pemerintahan dan potensi kekuasaan",
    en: "ЁЯда Awesomeness, having influence, governance and potential power",
    fr: "ЁЯда G├йnialit├й, avoir de l'influence, de la gouvernance et du pouvoir potentiel",
    es: "ЁЯда Genialidad, tener influencia, gobernanza y poder potencial.",
    ar: "ЁЯда ╪з┘Д╪▒┘И╪╣╪й ┘И╪з┘Е╪к┘Д╪з┘Г ╪з┘Д┘Ж┘Б┘И╪░ ┘И╪з┘Д╪н┘Г┘Е ┘И╪з┘Д┘В┘И╪й ╪з┘Д┘Е╪н╪к┘Е┘Д╪й",
    zh: "ЁЯда ф╗дф║║цХмчХПя╝МцЬЙх╜▒хУНхКЫуАБц▓╗чРЖхКЫхТМц╜ЬхЬицЭГхКЫ",
    hi: "ЁЯдардЕрджреНрднреБрддрддрд╛, рдкреНрд░рднрд╛рд╡, рд╢рд╛рд╕рди рдФрд░ рд╕рдВрднрд╛рд╡рд┐рдд рд╢рдХреНрддрд┐ рд╕реЗ рдпреБрдХреНрдд",
  },
  1000: {
    id: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Ciptakan jalan hidup manis, hidup rukun dalam berumahtangga. Komunikasi intens",
    en: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Create a sweet way of life, live in harmony in a household. Intense communication",
    fr: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Cr├йer une douceur de vivre, vivre en harmonie dans un foyer. Communication intense",
    es: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж Crea una dulce forma de vida, vive en armon├нa en un hogar. comunicaci├│n intensa",
    ar: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж ╪з╪╡┘Ж╪╣ ╪г╪│┘Д┘И╪и ╪н┘К╪з╪й ╪м┘Е┘К┘Д╪М ┘И╪╣╪┤ ┘Б┘К ┘И╪ж╪з┘Е ┘Б┘К ╪з┘Д┘Е┘Ж╪▓┘Д. ╪з┘Д╪к┘И╪з╪╡┘Д ╪з┘Д┘Е┘Г╪л┘Б",
    zh: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСжхИЫщАачФЬшЬЬчФЯц┤╗цЦ╣х╝Пя╝МхТМчЭжчЫ╕хдДуАВхпЖхИЗц▓ЯщАЪ",
    hi: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж рдордзреБрд░ рдЬреАрд╡рди рд╢реИрд▓реА рдмрдирд╛рдПрдВ, рдШрд░-рдкрд░рд┐рд╡рд╛рд░ рдореЗрдВ рд╕рджреНрднрд╛рд╡ рд╕реЗ рд░рд╣реЗрдВред рдЧрд╣рди рд╕рдВрдЪрд╛рд░",
  },
};

// Available ANGKA values for dropdown
const AVAILABLE_ANGKA_VALUES = [
  1, 3, 4, 5, 6, 7, 10, 12, 15, 16, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
  35, 36, 37, 40, 43, 44, 45, 46, 47, 50, 70, 75, 81, 100, 120, 300, 318, 360,
  365, 490, 500, 600, 700, 800, 1000,
];

interface NameGeneratorProps {
  isPremium?: boolean;
  nameDatabase?: string[];
  analysisName?: string;
  analysisBirthdate?: Date;
  analysisGender?: "Male" | "Female";
}

// Sample name database for demonstration
const SAMPLE_NAMES = [
  "Aditya",
  "Budi",
  "Citra",
  "Dewi",
  "Eka",
  "Farhan",
  "Gita",
  "Hadi",
  "Indah",
  "Joko",
  "Kartika",
  "Lina",
  "Mira",
  "Nadia",
  "Oscar",
  "Putri",
  "Qori",
  "Rini",
  "Surya",
  "Tono",
  "Utami",
  "Vina",
  "Wayan",
  "Xavier",
  "Yanti",
  "Zainal",
  "Anisa",
  "Bayu",
  "Cahya",
  "Dian",
  "Emma",
  "Fajar",
  "Gading",
  "Hana",
  "Irfan",
  "Julia",
  "Krisna",
  "Laras",
  "Maya",
  "Nina",
];

// Sample language options with flag emojis
const LANGUAGE_OPTIONS = [
  { id: "id", name: "Indonesian", flag: "ЁЯЗоЁЯЗй", countryName: "Indonesia" },
  { id: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕", countryName: "United States" },
  { id: "ar", name: "Arabic", flag: "ЁЯЗ╕ЁЯЗж", countryName: "Saudi Arabia" },
  { id: "jp", name: "Japanese", flag: "ЁЯЗпЁЯЗ╡", countryName: "Japan" },
  { id: "cn", name: "Chinese", flag: "ЁЯЗиЁЯЗ│", countryName: "China" },
];

export default function NameGenerator({
  isPremium = true,
  nameDatabase = SAMPLE_NAMES,
  analysisName = "",
  analysisBirthdate = null,
  analysisGender = "Male",
}: NameGeneratorProps) {
  const [baseFirstName, setBaseFirstName] = useState(analysisName || "");
  const [targetNumber, setTargetNumber] = useState("1");
  const [generatedNames, setGeneratedNames] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedLanguages, setSelectedLanguages] = useState(["id"]);
  const [nameType, setNameType] = useState("personal"); // 'personal' or 'baby'
  const [generationMode, setGenerationMode] = useState<"combi" | "advanced">(
    "advanced",
  );

  // Advanced search states
  const [showAdvancedModal, setShowAdvancedModal] = useState(false);
  const [userBirthdate, setUserBirthdate] = useState(
    analysisBirthdate
      ? `${analysisBirthdate.getDate().toString().padStart(2, "0")}/${(analysisBirthdate.getMonth() + 1).toString().padStart(2, "0")}/${analysisBirthdate.getFullYear()}`
      : "",
  );
  const [userGender, setUserGender] = useState<"Male" | "Female">(
    analysisGender || "Male",
  );
  const [targetHara, setTargetHara] = useState<string>("all");
  const [targetCoherence, setTargetCoherence] = useState("70");
  const [targetMomenSukses, setTargetMomenSukses] = useState("80");
  const [targetDeskripsi, setTargetDeskripsi] = useState("");
  const [startingLetter, setStartingLetter] = useState("");
  const [firstWordFilter, setFirstWordFilter] = useState("");
  const [secondWordFilter, setSecondWordFilter] = useState("");
  const [advancedResults, setAdvancedResults] = useState<any[]>([]);
  const [searchProgress, setSearchProgress] = useState("");
  const [isAdvancedSearching, setIsAdvancedSearching] = useState(false);
  const searchTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Full screen and analysis states
  const [showFullScreenResults, setShowFullScreenResults] = useState(false);
  const [selectedNameForAnalysis, setSelectedNameForAnalysis] = useState<
    string | null
  >(null);
  const [selectedNameBirthdate, setSelectedNameBirthdate] =
    useState<Date | null>(null);
  const [selectedNameGender, setSelectedNameGender] = useState<
    "Male" | "Female"
  >("Male");

  // Combi search states
  const [combiResults, setCombiResults] = useState<any[]>([]);
  const [combiProgress, setCombiProgress] = useState("");
  const [isCombiSearching, setIsCombiSearching] = useState(false);
  const combiTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Combi mode states
  const [targetPatterns, setTargetPatterns] = useState<{
    [key: string]: number;
  }>({});
  const [selectedPattern, setSelectedPattern] = useState<string | null>(null);
  const [selectedPatternValue, setSelectedPatternValue] = useState<number>(1);

  // Target description dropdown states
  const [selectedTargetDescription, setSelectedTargetDescription] = useState<
    number | null
  >(null);
  const { t, language } = useTranslation();

  const toggleLanguage = (langId: string) => {
    setSelectedLanguages((prev) =>
      prev.includes(langId)
        ? prev.filter((id) => id !== langId)
        : [...prev, langId],
    );
  };

  // Function to get description based on ANGKA value and language
  const getVlookupDescription = (value: number): string => {
    const entry = vlookupTable[value];
    if (!entry) return `G${value}: ${value}`;

    const langKey =
      language === "id"
        ? "id"
        : language === "en"
          ? "en"
          : language === "fr"
            ? "fr"
            : language === "es"
              ? "es"
              : language === "ar"
                ? "ar"
                : language === "zh"
                  ? "zh"
                  : language === "hi"
                    ? "hi"
                    : "en";
    return entry[langKey] || entry["en"] || `G${value}: ${value}`;
  };

  // Get dropdown options for target descriptions
  const getTargetDescriptionOptions = () => {
    return AVAILABLE_ANGKA_VALUES.map((value) => ({
      value,
      label: `${value} - ${getVlookupDescription(value).substring(0, 50)}...`,
      fullDescription: getVlookupDescription(value),
    }));
  };

  const handleAddTargetPattern = () => {
    if (selectedPattern && selectedPatternValue) {
      setTargetPatterns({
        ...targetPatterns,
        [selectedPattern]: selectedPatternValue,
      });
      setSelectedPattern(null);
      setSelectedPatternValue(1);
    }
  };

  const handleRemoveTargetPattern = (key: string) => {
    const newPatterns = { ...targetPatterns };
    delete newPatterns[key];
    setTargetPatterns(newPatterns);
  };

  const generateNames = () => {
    if (!baseFirstName.trim()) return;

    setIsGenerating(true);

    // Simulate processing time
    setTimeout(() => {
      let results: string[] = [];

      if (generationMode === "combi") {
        // For Combi mode, we'll use the advanced search modal instead
        setShowAdvancedModal(true);
        setIsGenerating(false);
        return;
      } else {
        // Generate names based on selected languages
        results = generateNamesForSelectedLanguages();
      }

      setGeneratedNames(results);
      setIsGenerating(false);
    }, 1000);
  };

  const generateNamesForSelectedLanguages = (): string[] => {
    const results: string[] = [];
    const targetNum = parseInt(targetNumber);

    // Generate names based on selected languages
    selectedLanguages.forEach((langId) => {
      const langOption = LANGUAGE_OPTIONS.find((opt) => opt.id === langId);
      if (langOption) {
        // Filter names from database based on language
        const filteredNames = nameDatabase.filter((name) => {
          // Simple logic to associate names with languages
          // This can be enhanced with actual language-specific databases
          if (langId === "id") return true; // Indonesian names (default)
          if (langId === "en") return /^[A-Za-z]+$/.test(name); // English names
          if (langId === "ar") return name.length > 4; // Arabic-style names
          if (langId === "jp") return name.length <= 5; // Japanese-style names
          if (langId === "cn") return name.length <= 4; // Chinese-style names
          return true;
        });

        // Generate variations with the base name
        filteredNames.slice(0, 5).forEach((name) => {
          if (baseFirstName.trim()) {
            results.push(`${baseFirstName.trim()} ${name}`);
            results.push(`${name} ${baseFirstName.trim()}`);
          } else {
            results.push(name);
          }
        });
      }
    });

    // Remove duplicates and limit results
    return [...new Set(results)].slice(0, 20);
  };

  const runAdvancedSearch = () => {
    if (generationMode === "combi") {
      runCombiSearch();
      return;
    }

    if (!baseFirstName.trim() || !userBirthdate.trim()) {
      alert("Nama dan Tanggal Lahir wajib diisi untuk pencarian lanjutan.");
      return;
    }

    // Calculate initial Life Path and Expression
    try {
      const [day, month, year] = userBirthdate.split("/").map(Number);
      if (!day || !month || !year) {
        alert("Format tanggal lahir tidak valid. Gunakan DD/MM/YYYY");
        return;
      }

      const birthdateObj = new Date(year, month - 1, day);
      const patterns = getPola(baseFirstName, birthdateObj, userGender);
      const initialLifePath = patterns.time;
      const initialExpression = patterns.destiny;

      if (!initialLifePath || !initialExpression) {
        alert("Gagal menghitung Life Path dan Expression. Periksa input Anda.");
        return;
      }

      setIsAdvancedSearching(true);
      setSearchProgress("Mempersiapkan pencarian lanjutan...");

      // Only reset results and state if this is a new search (not continuing)
      if (
        !complexState.isInitialized ||
        complexState.isFinishedCurrentSequence
      ) {
        setAdvancedResults([]);
        // Get database keys based on LP and Expression
        const dbKeys = getDatabaseKeysForComplex(
          initialLifePath,
          initialExpression,
        );
        if (dbKeys.length === 0) {
          setSearchProgress(
            `Tidak ada database yang sesuai untuk LP ${initialLifePath} & Exp ${initialExpression}`,
          );
          setIsAdvancedSearching(false);
          return;
        }

        // Reset complex state for new search
        resetComplexState();
        complexState.currentDatabaseList = [...dbKeys];
        // Map selected languages to language database keys
        const getLanguageKey = (langId: string) => {
          switch (langId) {
            case "id":
              return "id";
            case "en":
              return "en";
            case "ar":
              return "id"; // Arabic uses Indonesian database for now
            case "jp":
              return "id"; // Japanese uses Indonesian database for now
            case "cn":
              return "id"; // Chinese uses Indonesian database for now
            default:
              return "id";
          }
        };
        // Use the first selected language or default to "id"
        complexState.language = getLanguageKey(
          selectedLanguages.length > 0 ? selectedLanguages[0] : "id",
        );
        complexState.isInitialized = true;
      } else {
        // Continue from where we left off
        setSearchProgress("Melanjutkan pencarian dari posisi sebelumnya...");
      }

      // Start batch processing
      processAdvancedSearchBatch();
    } catch (error) {
      alert("Terjadi kesalahan dalam memproses data. Periksa input Anda.");
      setIsAdvancedSearching(false);
    }
  };

  const runCombiSearch = () => {
    if (!baseFirstName.trim() || !userBirthdate.trim()) {
      alert("Nama dan Tanggal Lahir wajib diisi untuk pencarian Combi.");
      return;
    }

    try {
      const [day, month, year] = userBirthdate.split("/").map(Number);
      if (!day || !month || !year) {
        alert("Format tanggal lahir tidak valid. Gunakan DD/MM/YYYY");
        return;
      }

      const birthdateObj = new Date(year, month - 1, day);
      const patterns = getPola(baseFirstName, birthdateObj, userGender);
      const initialLifePath = patterns.time;
      const initialExpression = patterns.destiny;

      if (!initialLifePath || !initialExpression) {
        alert("Gagal menghitung Life Path dan Expression. Periksa input Anda.");
        return;
      }

      setIsCombiSearching(true);
      setCombiProgress("Mempersiapkan pencarian Combi...");

      // Get database pairs for Combi
      const dbPairs = getDatabasePairsForCombi(
        initialLifePath,
        initialExpression,
      );
      if (dbPairs.length === 0) {
        setCombiProgress(
          `Tidak ada pasangan database Exp untuk LP ${initialLifePath} & Exp ${initialExpression}`,
        );
        setIsCombiSearching(false);
        return;
      }

      // Check if we need to reset or continue
      const currentDbPairListString = dbPairs
        .map((p) => `${p.db1Key}-${p.db2Key}`)
        .join(",");
      const previousDbPairListString = combiState.currentDatabasePairList
        .map((p) => `${p.db1Key}-${p.db2Key}`)
        .join(",");

      if (
        currentDbPairListString !== previousDbPairListString ||
        combiState.isFinishedCurrentPairSequence
      ) {
        resetCombiState();
        combiState.currentDatabasePairList = [...dbPairs];
        // Map selected languages to language database keys
        const getLanguageKey = (langId: string) => {
          switch (langId) {
            case "id":
              return "id";
            case "en":
              return "en";
            case "ar":
              return "id"; // Arabic uses Indonesian database for now
            case "jp":
              return "id"; // Japanese uses Indonesian database for now
            case "cn":
              return "id"; // Chinese uses Indonesian database for now
            default:
              return "id";
          }
        };
        // Use the first selected language or default to "id"
        combiState.language = getLanguageKey(
          selectedLanguages.length > 0 ? selectedLanguages[0] : "id",
        );
        combiState.isFinishedCurrentPairSequence = false;
        // Don't reset combiResults here to accumulate results
        // setCombiResults([]);
      }

      if (
        combiState.foundNamesThisOverallRun.length >= 10 &&
        !combiState.isFinishedCurrentPairSequence
      ) {
        combiState.foundNamesThisOverallRun = [];
      }

      // Start batch processing
      processCombiSearchBatch();
    } catch (error) {
      alert(
        "Terjadi kesalahan dalam memproses data Combi. Periksa input Anda.",
      );
      setIsCombiSearching(false);
    }
  };

  const processAdvancedSearchBatch = () => {
    const BATCH_PROCESSING_LIMIT_MS = 150;
    const MAX_RESULTS_PER_CLICK = 25;
    const startTime = Date.now();

    // Track how many new results we found in this batch
    const initialResultCount = advancedResults.length;
    let newResultsFound = 0;

    const processBatch = () => {
      while (
        newResultsFound < MAX_RESULTS_PER_CLICK &&
        !complexState.isFinishedCurrentSequence
      ) {
        if (Date.now() - startTime > BATCH_PROCESSING_LIMIT_MS) {
          setSearchProgress(
            `Memproses... Total variasi dicek: ${complexState.totalVariationsChecked}`,
          );
          searchTimeoutRef.current = setTimeout(processBatch, 0);
          return;
        }

        if (
          complexState.currentVariationIndex >=
          complexState.currentVariations.length
        ) {
          complexState.currentVariationIndex = 0;
          complexState.currentVariations = [];

          // Try all selected languages if multiple are selected
          let selectedDatabase = null;
          const currentDbKey =
            complexState.currentDatabaseList[
              complexState.currentDbIndexInSequence
            ];

          // If multiple languages are selected, try each one
          if (selectedLanguages.length > 1) {
            for (const langId of selectedLanguages) {
              const langKey =
                langId === "id" ? "id" : langId === "en" ? "en" : "id";
              if (
                languageDatabases[langKey] &&
                languageDatabases[langKey][currentDbKey]
              ) {
                selectedDatabase = languageDatabases[langKey][currentDbKey];
                break;
              }
            }
          } else {
            // Single language selection
            selectedDatabase =
              currentDbKey && languageDatabases[complexState.language]
                ? languageDatabases[complexState.language][currentDbKey]
                : null;
          }

          // Apply starting letter filter if specified (for advanced mode)
          if (selectedDatabase && startingLetter.trim()) {
            const filterLetter = startingLetter.trim().toUpperCase();
            selectedDatabase = selectedDatabase.filter((word: string) =>
              word.toUpperCase().startsWith(filterLetter),
            );
          }

          while (
            !selectedDatabase ||
            complexState.currentIndexInDb >= selectedDatabase.length
          ) {
            complexState.currentIndexInDb = 0;
            complexState.currentDbIndexInSequence++;
            if (
              complexState.currentDbIndexInSequence >=
              complexState.currentDatabaseList.length
            ) {
              complexState.isFinishedCurrentSequence = true;
              break;
            }
            const nextDbKey =
              complexState.currentDatabaseList[
                complexState.currentDbIndexInSequence
              ];

            // Try all selected languages for the next database
            selectedDatabase = null;
            if (selectedLanguages.length > 1) {
              for (const langId of selectedLanguages) {
                const langKey =
                  langId === "id" ? "id" : langId === "en" ? "en" : "id";
                if (
                  languageDatabases[langKey] &&
                  languageDatabases[langKey][nextDbKey]
                ) {
                  selectedDatabase = languageDatabases[langKey][nextDbKey];
                  break;
                }
              }
            } else {
              selectedDatabase =
                nextDbKey && languageDatabases[complexState.language]
                  ? languageDatabases[complexState.language][nextDbKey]
                  : null;
            }

            // Apply starting letter filter if specified
            if (selectedDatabase && startingLetter.trim()) {
              const filterLetter = startingLetter.trim().toUpperCase();
              selectedDatabase = selectedDatabase.filter((word: string) =>
                word.toUpperCase().startsWith(filterLetter),
              );
            }

            if (!selectedDatabase || selectedDatabase.length === 0) {
              continue;
            }
          }

          if (complexState.isFinishedCurrentSequence) break;

          const wordToAdd = selectedDatabase[complexState.currentIndexInDb];
          if (wordToAdd) {
            complexState.currentVariations = generateNameVariations(
              baseFirstName,
              [wordToAdd],
            );
          }
          complexState.currentIndexInDb++;
        }

        if (
          complexState.currentVariationIndex <
          complexState.currentVariations.length
        ) {
          const newName =
            complexState.currentVariations[complexState.currentVariationIndex];
          complexState.totalVariationsChecked++;
          const metrics = calculateMetricsForNameBasic(
            newName,
            userBirthdate,
            userGender,
          );

          if (metrics) {
            let match = true;

            // Check Hara filter
            if (targetHara !== "all") {
              const targetHaraNum = parseInt(targetHara);
              if (
                ![1, 2, 3, 4, 6].includes(targetHaraNum) ||
                metrics.hara !== targetHaraNum
              ) {
                match = false;
              }
            } else {
              if (![1, 2, 3, 4, 6].includes(metrics.hara)) {
                match = false;
              }
            }

            // Check Synchronize (locked at 100%)
            const syncNum = parseFloat(
              metrics.sync.toString().replace("%", ""),
            );
            if (syncNum < 100) match = false;

            // Check Coherence (convert percentage string to number)
            const targetCoherenceVal = parseFloat(targetCoherence);
            const coherenceNum = parseFloat(metrics.coherence.replace("%", ""));
            if (coherenceNum < targetCoherenceVal) match = false;

            // Check Momen Sukses (handle both percentage and decimal formats)
            const targetMomenSuksesVal = parseFloat(targetMomenSukses);
            let momenSuksesNum = 0;
            if (metrics.momenSukses === "1+") {
              momenSuksesNum = 100; // Treat "1+" as 100%
            } else {
              const momenSuksesFloat = parseFloat(metrics.momenSukses);
              // Convert decimal to percentage (multiply by 100)
              momenSuksesNum = momenSuksesFloat * 100;
            }
            if (momenSuksesNum < targetMomenSuksesVal) match = false;

            // Check Grafologi (locked at 100%)
            if (metrics.grafologiIndex !== "100%") match = false;

            // Check Target Deskripsi
            if (targetDeskripsi && metrics.saranAngka) {
              const targetAngkaSaran = parseInt(targetDeskripsi);
              if (!metrics.saranAngka.includes(targetAngkaSaran)) match = false;
            }

            if (match) {
              const newResult = {
                name: newName,
                hara: metrics.hara,
                sync: metrics.sync,
                coherence: metrics.coherence,
                synergize: metrics.synergize,
                productive: metrics.productive,
                momenSukses: metrics.momenSukses,
                grafologiIndex: metrics.grafologiIndex,
                saranAngka: metrics.saranAngka,
              };

              // Check if this result already exists to avoid duplicates
              const isDuplicate = advancedResults.some(
                (result) => result.name === newName,
              );
              if (!isDuplicate) {
                complexState.foundNamesThisOverallRun.push(newResult);
                newResultsFound++;
              }
            }
          }
          complexState.currentVariationIndex++;
        }
      }

      // Update results with all found names (previous + new)
      setAdvancedResults([...complexState.foundNamesThisOverallRun]);

      if (complexState.isFinishedCurrentSequence) {
        if (complexState.foundNamesThisOverallRun.length === 0) {
          setSearchProgress(
            `Pencarian selesai. Tidak ada nama yang cocok dari ${complexState.totalVariationsChecked} variasi.`,
          );
        } else {
          setSearchProgress(
            `Pencarian selesai. Total ditemukan ${complexState.foundNamesThisOverallRun.length} nama dari ${complexState.totalVariationsChecked} variasi.`,
          );
        }
        setIsAdvancedSearching(false);
      } else if (newResultsFound >= MAX_RESULTS_PER_CLICK) {
        setSearchProgress(
          `Menampilkan ${complexState.foundNamesThisOverallRun.length} hasil total. Klik lagi untuk hasil berikutnya.`,
        );
        setIsAdvancedSearching(false);
      } else {
        setSearchProgress(
          `Melanjutkan pencarian... Total ditemukan ${complexState.foundNamesThisOverallRun.length} dari ${complexState.totalVariationsChecked} variasi.`,
        );
        searchTimeoutRef.current = setTimeout(processBatch, 0);
      }
    };

    searchTimeoutRef.current = setTimeout(processBatch, 20);
  };

  const processCombiSearchBatch = () => {
    const BATCH_PROCESSING_LIMIT_MS = 150;
    const MAX_RESULTS_PER_CLICK = 50; // Generate 50 results per click
    const clickStartTime = Date.now();
    const startTime = Date.now();

    // Track combinations processed in this click
    let combinationsProcessedThisClick = 0;
    let newResultsFound = 0;

    const processBatch = () => {
      while (
        newResultsFound < MAX_RESULTS_PER_CLICK &&
        !combiState.isFinishedCurrentPairSequence
      ) {
        if (Date.now() - startTime > BATCH_PROCESSING_LIMIT_MS) {
          setCombiProgress(
            `Memproses... Hasil baru klik ini: ${newResultsFound}/${MAX_RESULTS_PER_CLICK}, Kombinasi klik ini: ${combinationsProcessedThisClick.toLocaleString()}, Total hasil: ${combiState.foundNamesThisOverallRun.length}, Total kombinasi: ${combiState.totalCombinationsChecked.toLocaleString()}`,
          );
          combiTimeoutRef.current = setTimeout(processBatch, 0);
          return;
        }

        if (
          combiState.currentVariationIndex >=
          combiState.currentVariations.length
        ) {
          combiState.currentVariationIndex = 0;
          combiState.currentVariations = [];

          const currentDbPair =
            combiState.currentDatabasePairList[
              combiState.currentDbPairIndexInSequence
            ];
          if (!currentDbPair) {
            combiState.isFinishedCurrentPairSequence = true;
            break;
          }

          // Try all selected languages if multiple are selected
          let db1 = null;
          let db2 = null;

          if (selectedLanguages.length > 1) {
            // Try each selected language until we find databases
            for (const langId of selectedLanguages) {
              const langKey =
                langId === "id" ? "id" : langId === "en" ? "en" : "id";
              if (languageDatabases[langKey]) {
                const tempDb1 =
                  languageDatabases[langKey][currentDbPair.db1Key];
                const tempDb2 =
                  languageDatabases[langKey][currentDbPair.db2Key];
                if (tempDb1 && tempDb2) {
                  db1 = tempDb1;
                  db2 = tempDb2;
                  break;
                }
              }
            }
          } else {
            // Single language selection
            db1 =
              languageDatabases[combiState.language]?.[currentDbPair.db1Key];
            db2 =
              languageDatabases[combiState.language]?.[currentDbPair.db2Key];
          }

          // Apply starting letter filters if specified (for combi mode)
          if (firstWordFilter.trim()) {
            const filterLetter = firstWordFilter.trim().toUpperCase();
            if (db1) {
              db1 = db1.filter((word: string) =>
                word.toUpperCase().startsWith(filterLetter),
              );
            }
          }
          if (secondWordFilter.trim()) {
            const filterLetter = secondWordFilter.trim().toUpperCase();
            if (db2) {
              db2 = db2.filter((word: string) =>
                word.toUpperCase().startsWith(filterLetter),
              );
            }
          }

          while (
            !db1 ||
            !db2 ||
            db1.length === 0 ||
            db2.length === 0 ||
            combiState.currentWord1IndexInDb >= db1.length
          ) {
            if (
              !db1 ||
              db1.length === 0 ||
              combiState.currentWord1IndexInDb >= db1.length
            ) {
              combiState.currentWord1IndexInDb = 0;
              combiState.currentWord2IndexInDb = 0;
              combiState.currentDbPairIndexInSequence++;
              if (
                combiState.currentDbPairIndexInSequence >=
                combiState.currentDatabasePairList.length
              ) {
                combiState.isFinishedCurrentPairSequence = true;
                break;
              }
              const nextDbPair =
                combiState.currentDatabasePairList[
                  combiState.currentDbPairIndexInSequence
                ];
              if (!nextDbPair) {
                combiState.isFinishedCurrentPairSequence = true;
                break;
              }

              // Try all selected languages for the next database pair
              db1 = null;
              db2 = null;
              if (selectedLanguages.length > 1) {
                for (const langId of selectedLanguages) {
                  const langKey =
                    langId === "id" ? "id" : langId === "en" ? "en" : "id";
                  if (languageDatabases[langKey]) {
                    const tempDb1 =
                      languageDatabases[langKey][nextDbPair.db1Key];
                    const tempDb2 =
                      languageDatabases[langKey][nextDbPair.db2Key];
                    if (tempDb1 && tempDb2) {
                      db1 = tempDb1;
                      db2 = tempDb2;
                      break;
                    }
                  }
                }
              } else {
                db1 =
                  languageDatabases[combiState.language]?.[nextDbPair.db1Key];
                db2 =
                  languageDatabases[combiState.language]?.[nextDbPair.db2Key];
              }

              // Apply starting letter filter if specified
              if (startingLetter.trim()) {
                const filterLetter = startingLetter.trim().toUpperCase();
                if (db1) {
                  db1 = db1.filter((word: string) =>
                    word.toUpperCase().startsWith(filterLetter),
                  );
                }
                if (db2) {
                  db2 = db2.filter((word: string) =>
                    word.toUpperCase().startsWith(filterLetter),
                  );
                }
              }
            } else {
              combiState.currentWord2IndexInDb = 0;
              combiState.currentWord1IndexInDb++;
              if (combiState.currentWord1IndexInDb >= db1.length) {
                continue;
              }
            }
            if (combiState.isFinishedCurrentPairSequence) break;
          }
          if (combiState.isFinishedCurrentPairSequence) break;

          const word1 = db1[combiState.currentWord1IndexInDb];
          const word2 = db2[combiState.currentWord2IndexInDb];

          if (word1 && word2) {
            combiState.currentVariations = generateNameVariations(
              baseFirstName,
              [word1, word2],
            );
          }

          combiState.currentWord2IndexInDb++;
          if (combiState.currentWord2IndexInDb >= db2.length) {
            combiState.currentWord2IndexInDb = 0;
            combiState.currentWord1IndexInDb++;
          }
        }

        if (
          combiState.currentVariationIndex < combiState.currentVariations.length
        ) {
          const newName =
            combiState.currentVariations[combiState.currentVariationIndex];
          combiState.totalCombinationsChecked++;
          combinationsProcessedThisClick++;
          const metrics = calculateMetricsForNameBasic(
            newName,
            userBirthdate,
            userGender,
          );

          if (metrics) {
            let match = true;

            // Apply filters
            const validHaraValues =
              targetHara === "all" ? [1, 2, 3, 4, 6] : [parseInt(targetHara)];
            if (!validHaraValues.includes(metrics.hara)) match = false;

            // Check Synchronize (locked at 100%)
            const syncNum = parseFloat(
              metrics.sync.toString().replace("%", ""),
            );
            if (syncNum < 100) match = false;

            // Check Coherence (convert percentage string to number)
            const targetCoherenceVal = parseFloat(targetCoherence);
            const coherenceNum = parseFloat(metrics.coherence.replace("%", ""));
            if (coherenceNum < targetCoherenceVal) match = false;

            // Check Momen Sukses (handle both percentage and decimal formats)
            const targetMomenSuksesVal = parseFloat(targetMomenSukses);
            let momenSuksesNum = 0;
            if (metrics.momenSukses === "1+") {
              momenSuksesNum = 100; // Treat "1+" as 100%
            } else {
              const momenSuksesFloat = parseFloat(metrics.momenSukses);
              // Convert decimal to percentage (multiply by 100)
              momenSuksesNum = momenSuksesFloat * 100;
            }
            if (momenSuksesNum < targetMomenSuksesVal) match = false;

            // Check Grafologi (locked at 100%)
            if (metrics.grafologiIndex !== "100%") match = false;

            if (targetDeskripsi && metrics.saranAngka) {
              const targetAngkaSaran = parseInt(targetDeskripsi);
              if (!metrics.saranAngka.includes(targetAngkaSaran)) match = false;
            }

            if (match) {
              const isDuplicate = combiState.foundNamesThisOverallRun.some(
                (result) => result.name === newName,
              );
              if (!isDuplicate) {
                const newResult = {
                  name: newName,
                  hara: metrics.hara,
                  sync: metrics.sync,
                  coherence: metrics.coherence,
                  synergize: metrics.synergize,
                  productive: metrics.productive,
                  momenSukses: metrics.momenSukses,
                  grafologiIndex: metrics.grafologiIndex,
                  saranAngka: metrics.saranAngka,
                };
                combiState.foundNamesThisOverallRun.push(newResult);
                newResultsFound++;
                // Update results immediately when found
                setCombiResults([...combiState.foundNamesThisOverallRun]);
              }
            }
          }
          combiState.currentVariationIndex++;
        }
      }

      // Results are updated immediately when found, no need to update here again

      if (combiState.isFinishedCurrentPairSequence) {
        if (combiState.foundNamesThisOverallRun.length === 0) {
          setCombiProgress(
            `Pencarian Combi selesai. Tidak ada nama yang cocok dari ${combiState.totalCombinationsChecked.toLocaleString()} kombinasi.`,
          );
        } else {
          setCombiProgress(
            `Pencarian Combi selesai. Total ditemukan ${combiState.foundNamesThisOverallRun.length} nama dari ${combiState.totalCombinationsChecked.toLocaleString()} kombinasi.`,
          );
        }
        setIsCombiSearching(false);
      } else if (newResultsFound >= MAX_RESULTS_PER_CLICK) {
        setCombiProgress(
          `Berhasil menemukan ${newResultsFound} hasil baru! Kombinasi dicek klik ini: ${combinationsProcessedThisClick.toLocaleString()}, Total hasil: ${combiState.foundNamesThisOverallRun.length} nama. Total kombinasi dicek: ${combiState.totalCombinationsChecked.toLocaleString()}. Klik lagi untuk 50 hasil berikutnya.`,
        );
        setIsCombiSearching(false);
      } else {
        setCombiProgress(
          `Melanjutkan pencarian Combi... Hasil baru: ${newResultsFound}/${MAX_RESULTS_PER_CLICK}, Kombinasi klik ini: ${combinationsProcessedThisClick.toLocaleString()}, Total hasil: ${combiState.foundNamesThisOverallRun.length}, Total kombinasi: ${combiState.totalCombinationsChecked.toLocaleString()}`,
        );
        combiTimeoutRef.current = setTimeout(processBatch, 0);
      }
    };

    combiTimeoutRef.current = setTimeout(processBatch, 20);
  };

  const stopAdvancedSearch = () => {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current);
      searchTimeoutRef.current = null;
    }
    if (combiTimeoutRef.current) {
      clearTimeout(combiTimeoutRef.current);
      combiTimeoutRef.current = null;
    }
    setIsAdvancedSearching(false);
    setIsCombiSearching(false);
    setSearchProgress("Pencarian dihentikan.");
    setCombiProgress("Pencarian Combi dihentikan.");
  };

  const clearAdvancedResults = () => {
    setAdvancedResults([]);
    resetComplexState();
    setSearchProgress("");
  };

  const clearCombiResults = () => {
    setCombiResults([]);
    resetCombiState();
    setCombiProgress("");
  };

  const handleNameClick = (name: string) => {
    if (!userBirthdate.trim()) {
      alert("Tanggal lahir diperlukan untuk analisis nama.");
      return;
    }

    try {
      const [day, month, year] = userBirthdate.split("/").map(Number);
      if (!day || !month || !year) {
        alert("Format tanggal lahir tidak valid. Gunakan DD/MM/YYYY");
        return;
      }

      const birthdateObj = new Date(year, month - 1, day);
      setSelectedNameForAnalysis(name);
      setSelectedNameBirthdate(birthdateObj);
      setSelectedNameGender(userGender);
    } catch (error) {
      alert("Terjadi kesalahan dalam memproses tanggal lahir.");
    }
  };

  const handleBackToResults = () => {
    setSelectedNameForAnalysis(null);
    setSelectedNameBirthdate(null);
  };

  const handleShowFullScreenResults = () => {
    setShowFullScreenResults(true);
  };

  const handleBackToModal = () => {
    setShowFullScreenResults(false);
  };

  const renderGenerationModeSelector = () => (
    <View className="mb-4">
      <Text className="text-gray-700 mb-1 font-medium">Generation Mode</Text>
      <View className="flex-row">
        <TouchableOpacity
          className={`flex-1 py-2 px-2 rounded-md items-center mr-1 ${generationMode === "advanced" ? "bg-purple-600" : "bg-gray-200"}`}
          onPress={() => setGenerationMode("advanced")}
          disabled={false}
        >
          <Text
            className={
              generationMode === "advanced" ? "text-white" : "text-gray-700"
            }
            style={{ fontSize: 10, textAlign: "center" }}
          >
            Add One Word
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          className={`flex-1 py-2 px-2 rounded-md items-center ${generationMode === "combi" ? "bg-purple-600" : "bg-gray-200"}`}
          onPress={() => setGenerationMode("combi")}
          disabled={false}
        >
          <Text
            className={
              generationMode === "combi" ? "text-white" : "text-gray-700"
            }
            style={{ fontSize: 10, textAlign: "center" }}
          >
            Add Some Word
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderCombiModeInputs = () => {
    if (generationMode !== "combi") return null;

    return (
      <View className="mb-4 p-3 bg-purple-50 rounded-lg">
        <Text className="text-purple-800 font-medium mb-2">
          Advanced Combination Generator (Combi)
        </Text>
        <Text className="text-gray-600 text-xs mb-2">
          Menambahkan DUA kata tambahan ke nama asli dengan penempatan dinamis.
          Database sumber kata (Exp) dipilih otomatis berdasarkan Life Path &
          Expression Anda.
        </Text>
        <Text className="text-gray-600 text-xs">
          Klik tombol "Generate Names" untuk mencari kombinasi nama berikutnya.
          Sistem akan menganalisis berbagai posisi penempatan kata
          (bersebelahan, terpisah, dll.).
        </Text>
      </View>
    );
  };

  return (
    <ScrollView className="bg-white rounded-lg shadow-md">
      <View className="p-4">
        <Text className="text-2xl font-bold text-center mb-6 text-purple-800">
          {nameType === "personal"
            ? "Personal Name Optimizer"
            : "Baby Name Generator"}
        </Text>

        <View className="flex-row mb-4">
          <TouchableOpacity
            className={`flex-1 py-2 px-4 rounded-md items-center ${nameType === "personal" ? "bg-purple-600" : "bg-gray-200"}`}
            onPress={() => setNameType("personal")}
          >
            <Text
              className={
                nameType === "personal" ? "text-white" : "text-gray-700"
              }
            >
              Personal Name
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            className={`flex-1 py-2 px-4 rounded-md items-center ml-2 ${nameType === "baby" ? "bg-purple-600" : "bg-gray-200"}`}
            onPress={() => setNameType("baby")}
          >
            <Text
              className={nameType === "baby" ? "text-white" : "text-gray-700"}
            >
              Baby Name
            </Text>
          </TouchableOpacity>
        </View>

        {renderGenerationModeSelector()}

        <View className="mb-4">
          <Text className="text-gray-700 mb-1 font-medium">
            {nameType === "personal"
              ? "Your First Name"
              : "Family Name (Optional)"}
          </Text>
          <TextInput
            className="border border-gray-300 rounded-md p-3 bg-gray-50"
            placeholder={
              nameType === "personal"
                ? "Enter your first name"
                : "Enter family name (optional)"
            }
            value={baseFirstName}
            onChangeText={setBaseFirstName}
          />
        </View>

        {renderCombiModeInputs()}
        {renderAdvancedModeInputs()}

        <View className="mb-6">
          <Text className="text-gray-700 mb-3 font-medium text-center text-lg">
            Name Origin Selection
          </Text>
          <View className="flex-row flex-wrap justify-center">
            {LANGUAGE_OPTIONS.map((lang) => (
              <TouchableOpacity
                key={lang.id}
                className={`m-2 px-4 py-3 rounded-full items-center justify-center flex-row ${selectedLanguages.includes(lang.id) ? "bg-purple-600 border-2 border-purple-700 shadow-lg" : "bg-white border-2 border-gray-300 shadow-md"} ${!isPremium && lang.id !== "id" ? "opacity-50" : ""}`}
                onPress={() => toggleLanguage(lang.id)}
                disabled={false}
                style={{
                  elevation: selectedLanguages.includes(lang.id) ? 6 : 3,
                  minWidth: 120,
                }}
              >
                <Text style={{ fontSize: 24, marginRight: 8 }}>
                  {lang.flag}
                </Text>
                <Text
                  className={`font-medium text-sm ${selectedLanguages.includes(lang.id) ? "text-white" : "text-gray-700"}`}
                  numberOfLines={1}
                >
                  {lang.countryName}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
          <Text className="text-center text-xs text-gray-500 mt-2">
            Select one or more countries for name generation
          </Text>
        </View>

        {
          <TouchableOpacity
            className="bg-purple-600 py-3 px-4 rounded-md items-center mb-6"
            onPress={
              generationMode === "advanced" || generationMode === "combi"
                ? () => setShowAdvancedModal(true)
                : generateNames
            }
            disabled={isGenerating}
          >
            {isGenerating ? (
              <ActivityIndicator color="white" />
            ) : (
              <Text className="text-white font-medium text-lg">
                {generationMode === "advanced" || generationMode === "combi"
                  ? generationMode === "combi"
                    ? "Jalankan/Lanjut Combi"
                    : "Advanced Search"
                  : "Generate Names"}
              </Text>
            )}
          </TouchableOpacity>
        }

        {/* Regular Generated Names for other modes */}
        {generatedNames.length > 0 && generationMode !== "advanced" && (
          <View>
            <Text className="text-xl font-semibold mb-2">Suggested Names</Text>
            <Text className="text-sm text-gray-600 mb-3">
              Generated from:{" "}
              {selectedLanguages
                .map(
                  (langId) =>
                    LANGUAGE_OPTIONS.find((opt) => opt.id === langId)?.name,
                )
                .filter(Boolean)
                .join(", ")}
            </Text>
            <FlatList
              data={generatedNames}
              keyExtractor={(item, index) => `name-${index}`}
              renderItem={({ item }) => (
                <View className="py-3 px-4 bg-purple-50 rounded-lg mb-2">
                  <Text className="text-lg text-purple-800 font-medium">
                    {item}
                  </Text>
                </View>
              )}
              ListEmptyComponent={
                <Text className="text-gray-500 text-center py-4">
                  No matching names found. Try different parameters.
                </Text>
              }
            />
          </View>
        )}
      </View>

      {/* Advanced Search Modal */}
      <Modal
        visible={showAdvancedModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowAdvancedModal(false)}
      >
        <View className="flex-1 justify-center items-center bg-black bg-opacity-50">
          <View className="bg-white rounded-lg p-6 w-96 max-w-full max-h-[90%]">
            <ScrollView>
              <Text className="text-lg font-bold text-center mb-4 text-purple-800">
                {generationMode === "combi"
                  ? "Advanced Combination Generator (Combi)"
                  : "Advanced Name Search"}
              </Text>

              {generationMode === "combi" && (
                <View className="mb-4 p-3 bg-red-50 rounded-lg">
                  <Text className="text-red-800 font-bold text-sm mb-1">
                    тЪая╕П PERINGATAN: Proses SANGAT INTENSIF!
                  </Text>
                  <Text className="text-red-700 text-xs">
                    Sistem akan menambahkan DUA kata dari database Exp yang
                    dipilih berdasarkan Life Path & Expression Anda, dengan
                    berbagai variasi posisi penempatan.
                  </Text>
                </View>
              )}

              <View className="mb-4">
                <Text className="text-gray-700 mb-1 font-medium">
                  Birth Date (DD/MM/YYYY)
                </Text>
                <TextInput
                  className="border border-gray-300 rounded-md p-3 bg-gray-50"
                  placeholder="15/03/1990"
                  value={userBirthdate}
                  onChangeText={setUserBirthdate}
                />
              </View>

              <View className="mb-4">
                <Text className="text-gray-700 mb-1 font-medium">Gender</Text>
                <View className="flex-row">
                  <TouchableOpacity
                    className={`flex-1 mr-2 p-3 rounded-md border ${
                      userGender === "Male"
                        ? "bg-purple-100 border-purple-500"
                        : "bg-gray-50 border-gray-300"
                    }`}
                    onPress={() => setUserGender("Male")}
                  >
                    <Text
                      className={`text-center font-medium ${
                        userGender === "Male"
                          ? "text-purple-700"
                          : "text-gray-700"
                      }`}
                    >
                      Male
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    className={`flex-1 ml-2 p-3 rounded-md border ${
                      userGender === "Female"
                        ? "bg-purple-100 border-purple-500"
                        : "bg-gray-50 border-gray-300"
                    }`}
                    onPress={() => setUserGender("Female")}
                  >
                    <Text
                      className={`text-center font-medium ${
                        userGender === "Female"
                          ? "text-purple-700"
                          : "text-gray-700"
                      }`}
                    >
                      Female
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>

              <View className="mb-4">
                <Text className="text-gray-700 mb-1 font-medium">
                  Target Hara
                </Text>
                <View className="border border-gray-300 rounded-md bg-gray-50">
                  <Picker
                    selectedValue={targetHara}
                    onValueChange={setTargetHara}
                    style={{ height: 40 }}
                  >
                    <Picker.Item label="All Valid (1,2,3,4,6)" value="all" />
                    <Picker.Item label="1" value="1" />
                    <Picker.Item label="2" value="2" />
                    <Picker.Item label="3" value="3" />
                    <Picker.Item label="4" value="4" />
                    <Picker.Item label="6" value="6" />
                  </Picker>
                </View>
              </View>

              <View className="mb-4 p-3 bg-blue-50 rounded-lg">
                <Text className="text-blue-800 font-medium mb-1">
                  Locked Targets:
                </Text>
                <Text className="text-blue-700 text-sm">
                  тАв Target Synchronize: 100% (Fixed)
                </Text>
                <Text className="text-blue-700 text-sm">
                  тАв Target Grafologi: 100% (Fixed)
                </Text>
              </View>

              <View className="mb-4">
                <Text className="text-gray-700 mb-1 font-medium">
                  Target Coherence (Min %)
                </Text>
                <TextInput
                  className="border border-gray-300 rounded-md p-3 bg-gray-50"
                  placeholder="70"
                  value={targetCoherence}
                  onChangeText={setTargetCoherence}
                  keyboardType="numeric"
                />
              </View>

              <View className="mb-4">
                <Text className="text-gray-700 mb-1 font-medium">
                  Target Momen Sukses (Min %)
                </Text>
                <TextInput
                  className="border border-gray-300 rounded-md p-3 bg-gray-50"
                  placeholder="80"
                  value={targetMomenSukses}
                  onChangeText={setTargetMomenSukses}
                  keyboardType="numeric"
                />
              </View>

              <View className="mb-4">
                <Text className="text-gray-700 mb-1 font-medium">
                  Target Deskripsi (Optional)
                </Text>
                <View className="border border-gray-300 rounded-md bg-gray-50">
                  <Picker
                    selectedValue={selectedTargetDescription}
                    onValueChange={(value) => {
                      setSelectedTargetDescription(value);
                      setTargetDeskripsi(value ? value.toString() : "");
                    }}
                    style={{ height: 40 }}
                  >
                    <Picker.Item label="Pilih Target Deskripsi" value={null} />
                    {getTargetDescriptionOptions().map((option) => (
                      <Picker.Item
                        key={option.value}
                        label={option.label}
                        value={option.value}
                      />
                    ))}
                  </Picker>
                </View>
                {selectedTargetDescription && (
                  <View className="mt-2 p-3 bg-blue-50 rounded-lg">
                    <Text className="text-blue-800 text-sm font-medium mb-1">
                      Deskripsi Lengkap:
                    </Text>
                    <Text className="text-blue-700 text-xs">
                      {getVlookupDescription(selectedTargetDescription)}
                    </Text>
                  </View>
                )}
              </View>

              {generationMode === "combi" ? (
                <View className="mb-4">
                  <Text className="text-gray-700 mb-2 font-medium">
                    Filter Awalan Huruf (Optional)
                  </Text>
                  <View className="flex-row space-x-2">
                    <View className="flex-1">
                      <Text className="text-gray-600 mb-1 text-sm">
                        Kata Pertama
                      </Text>
                      <TextInput
                        className="border border-gray-300 rounded-md p-3 bg-gray-50"
                        placeholder="A"
                        value={firstWordFilter}
                        onChangeText={setFirstWordFilter}
                        maxLength={1}
                        autoCapitalize="characters"
                      />
                    </View>
                    <View className="flex-1">
                      <Text className="text-gray-600 mb-1 text-sm">
                        Kata Kedua
                      </Text>
                      <TextInput
                        className="border border-gray-300 rounded-md p-3 bg-gray-50"
                        placeholder="B"
                        value={secondWordFilter}
                        onChangeText={setSecondWordFilter}
                        maxLength={1}
                        autoCapitalize="characters"
                      />
                    </View>
                  </View>
                  <Text className="text-xs text-gray-500 mt-1">
                    Filter kata berdasarkan huruf awal untuk setiap posisi kata
                  </Text>
                </View>
              ) : (
                <View className="mb-4">
                  <Text className="text-gray-700 mb-1 font-medium">
                    Filter Awalan Huruf (Optional)
                  </Text>
                  <TextInput
                    className="border border-gray-300 rounded-md p-3 bg-gray-50"
                    placeholder="Masukkan huruf awal kata (contoh: A)"
                    value={startingLetter}
                    onChangeText={setStartingLetter}
                    maxLength={1}
                    autoCapitalize="characters"
                  />
                  <Text className="text-xs text-gray-500 mt-1">
                    Hanya kata yang dimulai dengan huruf ini yang akan digunakan
                    dari database exp1-exp9
                  </Text>
                </View>
              )}

              {searchProgress || combiProgress ? (
                <View className="mb-4 p-3 bg-yellow-50 rounded-lg">
                  <Text className="text-yellow-800 text-sm">
                    {generationMode === "combi"
                      ? combiProgress
                      : searchProgress}
                  </Text>
                </View>
              ) : null}

              {(advancedResults.length > 0 || combiResults.length > 0) && (
                <View className="mb-4">
                  <View className="flex-row justify-between items-center mb-3">
                    <Text
                      className="text-xl font-bold flex-1 text-center"
                      style={{
                        fontFamily: "serif",
                        color: "#6B46C1",
                        textShadowColor: "rgba(0,0,0,0.1)",
                        textShadowOffset: { width: 1, height: 1 },
                        textShadowRadius: 2,
                      }}
                    >
                      {generationMode === "combi"
                        ? "тЬи Hasil Pencarian Combi тЬи"
                        : "ЁЯФН Search Results ЁЯФН"}
                    </Text>
                    <TouchableOpacity
                      className="bg-blue-100 px-3 py-1 rounded-md ml-2"
                      onPress={handleShowFullScreenResults}
                    >
                      <Text className="text-blue-700 text-xs font-medium">
                        Full Screen
                      </Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      className="bg-red-100 px-3 py-1 rounded-md ml-2"
                      onPress={
                        generationMode === "combi"
                          ? clearCombiResults
                          : clearAdvancedResults
                      }
                    >
                      <Text className="text-red-700 text-xs font-medium">
                        Clear
                      </Text>
                    </TouchableOpacity>
                  </View>
                  <ScrollView
                    style={{ maxHeight: 250 }}
                    className="bg-gradient-to-b from-purple-50 to-white rounded-lg p-2"
                  >
                    {(generationMode === "combi"
                      ? combiResults
                      : advancedResults
                    ).map((result, index) => (
                      <TouchableOpacity
                        key={index}
                        className="py-3 px-3 mb-2 bg-white rounded-lg shadow-sm border-l-4 border-purple-400"
                        style={{ elevation: 2 }}
                        onPress={() => handleNameClick(result.name)}
                      >
                        <View className="flex-row items-start mb-2">
                          <View className="w-8 h-8 bg-purple-600 rounded-full justify-center items-center mr-3">
                            <Text
                              className="text-sm font-bold text-white"
                              style={{ fontFamily: "monospace" }}
                            >
                              {index + 1}
                            </Text>
                          </View>
                          <Text
                            className="text-lg font-bold flex-1"
                            style={{
                              fontFamily: "serif",
                              color: "#4C1D95",
                              letterSpacing: 0.5,
                            }}
                          >
                            {result.name}
                          </Text>
                        </View>
                        <View className="flex-row justify-end items-center flex-wrap">
                          <View className="w-8 h-8 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full mr-1 mb-1 justify-center items-center shadow-md">
                            <Text
                              className="text-white text-center font-bold"
                              style={{
                                fontFamily: "monospace",
                                fontSize: 10,
                                lineHeight: 11,
                              }}
                            >
                              H{"\n"}
                              {result.hara}
                            </Text>
                          </View>
                          <View className="w-8 h-8 bg-gradient-to-br from-green-400 to-green-600 rounded-full mr-1 mb-1 justify-center items-center shadow-md">
                            <Text
                              className="text-white text-center font-bold"
                              style={{
                                fontFamily: "monospace",
                                fontSize: 10,
                                lineHeight: 11,
                              }}
                            >
                              S{"\n"}
                              {typeof result.sync === "string"
                                ? result.sync.replace("%", "") + "%"
                                : result.sync + "%"}
                            </Text>
                          </View>
                          <View className="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full mr-1 mb-1 justify-center items-center shadow-md">
                            <Text
                              className="text-white text-center font-bold"
                              style={{
                                fontFamily: "monospace",
                                fontSize: 10,
                                lineHeight: 11,
                              }}
                            >
                              C{"\n"}
                              {result.coherence.replace("%", "") + "%"}
                            </Text>
                          </View>
                          <View className="w-8 h-8 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full mr-1 mb-1 justify-center items-center shadow-md">
                            <Text
                              className="text-white text-center font-bold"
                              style={{
                                fontFamily: "monospace",
                                fontSize: 10,
                                lineHeight: 11,
                              }}
                            >
                              Y{"\n"}
                              {result.synergize.toString().replace("%", "") +
                                "%"}
                            </Text>
                          </View>
                          <View className="w-8 h-8 bg-gradient-to-br from-teal-400 to-teal-600 rounded-full mr-1 mb-1 justify-center items-center shadow-md">
                            <Text
                              className="text-white text-center font-bold"
                              style={{
                                fontFamily: "monospace",
                                fontSize: 10,
                                lineHeight: 11,
                              }}
                            >
                              P{"\n"}
                              {result.productive.toString().replace("%", "") +
                                "%"}
                            </Text>
                          </View>
                          <View className="w-8 h-8 bg-gradient-to-br from-pink-400 to-pink-600 rounded-full mb-1 justify-center items-center shadow-md">
                            <Text
                              className="text-white text-center font-bold"
                              style={{
                                fontFamily: "monospace",
                                fontSize: 10,
                                lineHeight: 11,
                              }}
                            >
                              M{"\n"}
                              {result.momenSukses === "1+"
                                ? "100%"
                                : Math.round(
                                    parseFloat(result.momenSukses) * 100,
                                  ) + "%"}
                            </Text>
                          </View>
                        </View>
                      </TouchableOpacity>
                    ))}
                  </ScrollView>
                </View>
              )}

              <View className="flex-row justify-between">
                <TouchableOpacity
                  className="bg-gray-300 py-2 px-4 rounded-md flex-1 mr-2"
                  onPress={() => setShowAdvancedModal(false)}
                >
                  <Text className="text-gray-700 text-center font-medium">
                    Close
                  </Text>
                </TouchableOpacity>
                {isAdvancedSearching || isCombiSearching ? (
                  <TouchableOpacity
                    className="bg-red-600 py-2 px-4 rounded-md flex-1 ml-2"
                    onPress={stopAdvancedSearch}
                  >
                    <Text className="text-white text-center font-medium">
                      Stop
                    </Text>
                  </TouchableOpacity>
                ) : (
                  <TouchableOpacity
                    className="bg-purple-600 py-2 px-4 rounded-md flex-1 ml-2"
                    onPress={runAdvancedSearch}
                  >
                    <Text className="text-white text-center font-medium">
                      {generationMode === "combi"
                        ? "Jalankan/Lanjut Combi"
                        : "Search"}
                    </Text>
                  </TouchableOpacity>
                )}
              </View>
            </ScrollView>
          </View>
        </View>
      </Modal>

      {/* Full Screen Results Modal */}
      <Modal
        visible={showFullScreenResults}
        transparent={false}
        animationType="slide"
        onRequestClose={handleBackToModal}
      >
        <View className="flex-1 bg-white">
          {selectedNameForAnalysis ? (
            <View className="flex-1">
              <View className="flex-row items-center justify-between p-4 bg-purple-600">
                <TouchableOpacity
                  className="bg-white px-4 py-2 rounded-md"
                  onPress={handleBackToResults}
                >
                  <Text className="text-purple-600 font-medium">
                    тЖР Back to List
                  </Text>
                </TouchableOpacity>
                <Text className="text-white text-lg font-bold flex-1 text-center">
                  Name Analysis
                </Text>
                <TouchableOpacity
                  className="bg-white px-4 py-2 rounded-md"
                  onPress={handleBackToModal}
                >
                  <Text className="text-purple-600 font-medium">Close</Text>
                </TouchableOpacity>
              </View>
              <NumerologyResults
                name={selectedNameForAnalysis}
                birthdate={selectedNameBirthdate || new Date()}
                gender={selectedNameGender}
                isPremium={isPremium}
              />
            </View>
          ) : (
            <View className="flex-1">
              <View className="flex-row items-center justify-between p-4 bg-purple-600">
                <TouchableOpacity
                  className="bg-white px-4 py-2 rounded-md"
                  onPress={handleBackToModal}
                >
                  <Text className="text-purple-600 font-medium">тЖР Back</Text>
                </TouchableOpacity>
                <Text className="text-white text-lg font-bold flex-1 text-center">
                  {generationMode === "combi"
                    ? "тЬи Hasil Pencarian Combi тЬи"
                    : "ЁЯФН Search Results ЁЯФН"}
                </Text>
                <TouchableOpacity
                  className="bg-red-500 px-4 py-2 rounded-md"
                  onPress={
                    generationMode === "combi"
                      ? clearCombiResults
                      : clearAdvancedResults
                  }
                >
                  <Text className="text-white font-medium">Clear All</Text>
                </TouchableOpacity>
              </View>
              <ScrollView className="flex-1 p-4">
                <Text className="text-center text-gray-600 mb-4">
                  Tap any name to see detailed analysis
                </Text>
                {(generationMode === "combi"
                  ? combiResults
                  : advancedResults
                ).map((result, index) => (
                  <TouchableOpacity
                    key={index}
                    className="py-4 px-4 mb-3 bg-white rounded-lg shadow-md border-l-4 border-purple-400"
                    style={{ elevation: 3 }}
                    onPress={() => handleNameClick(result.name)}
                  >
                    <View className="flex-row items-start mb-3">
                      <View className="w-10 h-10 bg-purple-600 rounded-full justify-center items-center mr-4">
                        <Text
                          className="text-lg font-bold text-white"
                          style={{ fontFamily: "monospace" }}
                        >
                          {index + 1}
                        </Text>
                      </View>
                      <Text
                        className="text-xl font-bold flex-1"
                        style={{
                          fontFamily: "serif",
                          color: "#4C1D95",
                          letterSpacing: 0.5,
                        }}
                      >
                        {result.name}
                      </Text>
                    </View>
                    <View className="flex-row justify-center items-center flex-wrap">
                      <View className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full mr-2 mb-2 justify-center items-center shadow-md">
                        <Text
                          className="text-white text-center font-bold"
                          style={{
                            fontFamily: "monospace",
                            fontSize: 12,
                            lineHeight: 13,
                          }}
                        >
                          Hara{"\n"}
                          {result.hara}
                        </Text>
                      </View>
                      <View className="w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-full mr-2 mb-2 justify-center items-center shadow-md">
                        <Text
                          className="text-white text-center font-bold"
                          style={{
                            fontFamily: "monospace",
                            fontSize: 12,
                            lineHeight: 13,
                          }}
                        >
                          Sync{"\n"}
                          {typeof result.sync === "string"
                            ? result.sync.replace("%", "") + "%"
                            : result.sync + "%"}
                        </Text>
                      </View>
                      <View className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full mr-2 mb-2 justify-center items-center shadow-md">
                        <Text
                          className="text-white text-center font-bold"
                          style={{
                            fontFamily: "monospace",
                            fontSize: 12,
                            lineHeight: 13,
                          }}
                        >
                          Coher{"\n"}
                          {result.coherence.replace("%", "") + "%"}
                        </Text>
                      </View>
                      <View className="w-12 h-12 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full mr-2 mb-2 justify-center items-center shadow-md">
                        <Text
                          className="text-white text-center font-bold"
                          style={{
                            fontFamily: "monospace",
                            fontSize: 12,
                            lineHeight: 13,
                          }}
                        >
                          Synrg{"\n"}
                          {result.synergize.toString().replace("%", "") + "%"}
                        </Text>
                      </View>
                      <View className="w-12 h-12 bg-gradient-to-br from-teal-400 to-teal-600 rounded-full mr-2 mb-2 justify-center items-center shadow-md">
                        <Text
                          className="text-white text-center font-bold"
                          style={{
                            fontFamily: "monospace",
                            fontSize: 12,
                            lineHeight: 13,
                          }}
                        >
                          Prod{"\n"}
                          {result.productive.toString().replace("%", "") + "%"}
                        </Text>
                      </View>
                      <View className="w-12 h-12 bg-gradient-to-br from-pink-400 to-pink-600 rounded-full mb-2 justify-center items-center shadow-md">
                        <Text
                          className="text-white text-center font-bold"
                          style={{
                            fontFamily: "monospace",
                            fontSize: 12,
                            lineHeight: 13,
                          }}
                        >
                          Momen{"\n"}
                          {result.momenSukses === "1+"
                            ? "100%"
                            : Math.round(parseFloat(result.momenSukses) * 100) +
                              "%"}
                        </Text>
                      </View>
                    </View>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          )}
        </View>
      </Modal>
    </ScrollView>
  );

  function renderAdvancedModeInputs() {
    if (generationMode !== "advanced") return null;

    return (
      <View className="mb-4 p-3 bg-purple-50 rounded-lg">
        <Text className="text-purple-800 font-medium mb-2">
          Advanced Search Mode
        </Text>
        <Text className="text-gray-600 text-xs mb-2">
          Systematic search based on your numerological profile with advanced
          filtering
        </Text>
        <Text className="text-gray-600 text-xs">
          Click "Advanced Search" to configure filters and start the intensive
          search process.
        </Text>
      </View>
    );
  }
}
